{
    "$schema": "https://docs.oasis-open.org/sarif/sarif/v2.1.0/os/schemas/sarif-schema-2.1.0.json",
    "version": "2.1.0",
    "runs": [{
        "versionControlProvenance": [{
            "revisionId": "379fb39afd1fbdc895595070f55b3abccb27cc8d",
            "repositoryUri": "https://github.com/RaselORF/Thunder",
            "mappedTo": {"uriBaseId": "%SRCROOT%"},
            "branch": "0.2-hibernate"
        }],
        "results": [
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 24,
                        "snippet": {"text": "public boolean sending;\n"},
                        "endColumn": 27,
                        "startColumn": 4,
                        "startLine": 24,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/layer/high/payments/PaymentData.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _PaymentData.java_, class: _PaymentData_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: PaymentData.java, class: PaymentData has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/high/payments/LNPaymentLogicImpl.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/high/payments/LNPaymentLogicImpl.java\n@@ -53,7 +53,7 @@\n         for (PaymentData payment : allPayments) {\n             Coin value = Coin.valueOf(payment.amount);\n             Script script;\n-            if (payment.sending) {\n+            if (payment.getSending()) {\n                 script = ScriptTools.getChannelTxOutputPaymentSending(keyServer, keyClient, revocationHash, payment.secret, payment.timestampRefund);\n             } else {\n                 script = ScriptTools.getChannelTxOutputPaymentReceiving(keyServer, keyClient, revocationHash, payment.secret, payment.timestampRefund);\n@@ -258,7 +258,7 @@\n     private static void checkRefundedPayments (ChannelUpdate newStatus) {\n         for (PaymentData paymentData : newStatus.refundedPayments) {\n             //We reversed the ChannelStatus, so if we are receiving, he is sending\n-            if (!paymentData.sending) {\n+            if (!paymentData.getSending()) {\n                 throw new LNPaymentException(\"Trying to refund a sent payment\");\n             }\n         }\n@@ -266,7 +266,7 @@\n \n     private static void checkRedeemedPayments (ChannelUpdate newStatus) {\n         for (PaymentData paymentData : newStatus.redeemedPayments) {\n-            if (!paymentData.sending) {\n+            if (!paymentData.getSending()) {\n                 throw new LNPaymentException(\"Trying to redeem a sent payment?\");\n             }\n             if (!paymentData.secret.verify()) {\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 25,
                        "snippet": {"text": "public long amount;\n"},
                        "endColumn": 23,
                        "startColumn": 4,
                        "startLine": 25,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/layer/high/payments/PaymentData.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _PaymentData.java_, class: _PaymentData_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: PaymentData.java, class: PaymentData has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/database/hibernate/PaymentDataEntity.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/database/hibernate/PaymentDataEntity.java\n@@ -26,7 +26,7 @@\n \n     public PaymentDataEntity (PaymentData paymentData) {\n         sending = paymentData.sending;\n-        amount = paymentData.amount;\n+        amount = paymentData.getAmount();\n         secret = paymentData.secret.secret;\n         secretHash = paymentData.secret.hash;\n         timestampOpen = paymentData.timestampOpen;\n@@ -37,7 +37,7 @@\n     public PaymentData toPaymentData() {\n         PaymentData paymentData = new PaymentData();\n         paymentData.sending = sending;\n-        paymentData.amount = amount;\n+        paymentData.setAmount(amount);\n         paymentData.secret = new PaymentSecret(secret, secretHash);\n         paymentData.timestampOpen = timestampOpen;\n         paymentData.timestampRefund = timestampRefund;\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 27,
                        "snippet": {"text": "public PaymentSecret secret;\n"},
                        "endColumn": 32,
                        "startColumn": 4,
                        "startLine": 27,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/layer/high/payments/PaymentData.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _PaymentData.java_, class: _PaymentData_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: PaymentData.java, class: PaymentData has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/high/payments/PaymentData.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/high/payments/PaymentData.java\n@@ -24,7 +24,7 @@\n     public boolean sending;\n     public long amount;\n \n-    public PaymentSecret secret;\n+    private PaymentSecret secret;\n     public int timestampOpen;\n     public int timestampRefund; //timestamp at which the other party will consider this payment refunded\n \n@@ -84,4 +84,12 @@\n             throw new RuntimeException(e);\n         }\n     }\n+\n+\tpublic PaymentSecret getSecret() {\n+\t\treturn secret;\n+\t}\n+\n+\tpublic void setSecret(PaymentSecret secret) {\n+\t\tthis.secret = secret;\n+\t}\n }\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 28,
                        "snippet": {"text": "public int timestampOpen;\n"},
                        "endColumn": 29,
                        "startColumn": 4,
                        "startLine": 28,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/layer/high/payments/PaymentData.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _PaymentData.java_, class: _PaymentData_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: PaymentData.java, class: PaymentData has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/high/payments/PaymentData.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/high/payments/PaymentData.java\n@@ -25,7 +25,7 @@\n     public long amount;\n \n     public PaymentSecret secret;\n-    public int timestampOpen;\n+    private int timestampOpen;\n     public int timestampRefund; //timestamp at which the other party will consider this payment refunded\n \n     public OnionObject onionObject;\n@@ -84,4 +84,12 @@\n             throw new RuntimeException(e);\n         }\n     }\n+\n+\tpublic int getTimestampOpen() {\n+\t\treturn timestampOpen;\n+\t}\n+\n+\tpublic void setTimestampOpen(int timestampOpen) {\n+\t\tthis.timestampOpen = timestampOpen;\n+\t}\n }\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 29,
                        "snippet": {"text": "public int timestampRefund;\n"},
                        "endColumn": 31,
                        "startColumn": 4,
                        "startLine": 29,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/layer/high/payments/PaymentData.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _PaymentData.java_, class: _PaymentData_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: PaymentData.java, class: PaymentData has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/database/hibernate/PaymentDataEntity.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/database/hibernate/PaymentDataEntity.java\n@@ -30,7 +30,7 @@\n         secret = paymentData.secret.secret;\n         secretHash = paymentData.secret.hash;\n         timestampOpen = paymentData.timestampOpen;\n-        timestampRefund = paymentData.timestampRefund;\n+        timestampRefund = paymentData.getTimestampRefund();\n         onionObject = paymentData.onionObject;\n     }\n \n@@ -40,7 +40,7 @@\n         paymentData.amount = amount;\n         paymentData.secret = new PaymentSecret(secret, secretHash);\n         paymentData.timestampOpen = timestampOpen;\n-        paymentData.timestampRefund = timestampRefund;\n+        paymentData.setTimestampRefund(timestampRefund);\n         paymentData.onionObject = onionObject;\n         return paymentData;\n     }\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 31,
                        "snippet": {"text": "public OnionObject onionObject;\n"},
                        "endColumn": 35,
                        "startColumn": 4,
                        "startLine": 31,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/layer/high/payments/PaymentData.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _PaymentData.java_, class: _PaymentData_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: PaymentData.java, class: PaymentData has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/ThunderContext.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/ThunderContext.java\n@@ -111,7 +111,7 @@\n \n             PaymentData paymentData = new PaymentData();\n             paymentData.amount = amount;\n-            paymentData.onionObject = object;\n+            paymentData.setOnionObject(object);\n             paymentData.secret = secret;\n             paymentData.timestampOpen = Tools.currentTime();\n             paymentData.timestampRefund = Tools.currentTime() + route.size()\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 205,
                        "snippet": {"text": "s.equals(\"\")"},
                        "endColumn": 35,
                        "startColumn": 23,
                        "startLine": 205,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/MainNode.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "ESC-1",
                "message": {
                    "markdown": "In file: method: _MainNode.java_, there is a method _showIntroductionAndGetNodeList_ that checks if a _String_ is empty using _equals_ method. It is better to do the emptiness check using [String.equals](https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/String.html#equals(java.lang.Object)) method as it has less overhead than [String.isEmpty](https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/String.html#isEmpty()) method. iCR fixed the issue by using the _String.isEmpty()_ method.",
                    "text": "In file: MainNode.java, there is a method showIntroductionAndGetNodeList that checks if a {String} is empty using {equals} method. It is better to do the emptiness check using String.equals method as it has less overhead than String.isEmpty method. iCR fixed the issue by using the {String.isEmpty()} method."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/MainNode.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/MainNode.java\n@@ -202,7 +202,7 @@\n \n             if (s.equals(\"0\")) {\n                 return null;\n-            } else if (s.equals(\"\")) {\n+            } else if (s.isEmpty()) {\n                 return nodeList;\n             } else if (s.equals(server.pubKeyServer.getPublicKeyAsHex())) {\n                 System.out.println(\"You cannot connect to yourself..\");\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 180,
                        "snippet": {"text": "s.equals(\"\")"},
                        "endColumn": 25,
                        "startColumn": 13,
                        "startLine": 180,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/MainNode.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "ESC-1",
                "message": {
                    "markdown": "In file: method: _MainNode.java_, there is a method _askForHostname_ that checks if a _String_ is empty using _equals_ method. It is better to do the emptiness check using [String.equals](https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/String.html#equals(java.lang.Object)) method as it has less overhead than [String.isEmpty](https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/String.html#isEmpty()) method. iCR fixed the issue by using the _String.isEmpty()_ method.",
                    "text": "In file: MainNode.java, there is a method askForHostname that checks if a {String} is empty using {equals} method. It is better to do the emptiness check using String.equals method as it has less overhead than String.isEmpty method. iCR fixed the issue by using the {String.isEmpty()} method."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/MainNode.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/MainNode.java\n@@ -177,7 +177,7 @@\n         System.out.print(\">>>> \");\n         Scanner sc = new Scanner(System.in);\n         String s = sc.nextLine();\n-        if (!s.equals(\"\")) {\n+        if (!s.isEmpty()) {\n             configuration.hostnameServer = s;\n         }\n     }\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 6,
                        "snippet": {"text": "public ECKey pubKeyServer;\n"},
                        "endColumn": 30,
                        "startColumn": 4,
                        "startLine": 6,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/ServerObject.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _ServerObject.java_, class: _ServerObject_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: ServerObject.java, class: ServerObject has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/low/authentication/AuthenticationProcessorImpl.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/low/authentication/AuthenticationProcessorImpl.java\n@@ -114,7 +114,7 @@\n \n     public AuthenticationMessage getAuthenticationMessage () {\n         try {\n-            ECKey keyServer = serverObject.pubKeyServer;\n+            ECKey keyServer = serverObject.getPubKeyServer();\n             ECKey keyClient = node.ephemeralKeyClient;\n \n             byte[] data = new byte[keyServer.getPubKey().length + keyClient.getPubKey().length];\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 8,
                        "snippet": {"text": "public String hostServer;\n"},
                        "endColumn": 29,
                        "startColumn": 4,
                        "startLine": 8,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/ServerObject.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _ServerObject.java_, class: _ServerObject_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: ServerObject.java, class: ServerObject has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/ServerObject.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/ServerObject.java\n@@ -5,7 +5,7 @@\n public class ServerObject {\n     public ECKey pubKeyServer;\n \n-    public String hostServer;\n+    private String hostServer;\n     public int portServer;\n \n     public LNConfiguration configuration = new LNConfiguration();\n@@ -55,4 +55,12 @@\n     public interface OnConnectionCloseListener {\n         void onClose ();\n     }\n+\n+\tpublic String getHostServer() {\n+\t\treturn hostServer;\n+\t}\n+\n+\tpublic void setHostServer(String hostServer) {\n+\t\tthis.hostServer = hostServer;\n+\t}\n }\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 9,
                        "snippet": {"text": "public int portServer;\n"},
                        "endColumn": 26,
                        "startColumn": 4,
                        "startLine": 9,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/ServerObject.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _ServerObject.java_, class: _ServerObject_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: ServerObject.java, class: ServerObject has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/ConnectionManagerImpl.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/ConnectionManagerImpl.java\n@@ -172,7 +172,7 @@\n \n     public void startListening (ResultCommand callback) {\n         server = new P2PServer(contextFactory);\n-        server.startServer(this.node.portServer);\n+        server.startServer(this.node.getPortServer());\n         callback.execute(new SuccessResult());\n     }\n \n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 11,
                        "snippet": {"text": "public LNConfiguration configuration=new LNConfiguration();\n"},
                        "endColumn": 65,
                        "startColumn": 4,
                        "startLine": 11,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/ServerObject.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _ServerObject.java_, class: _ServerObject_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: ServerObject.java, class: ServerObject has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/high/payments/LNPaymentHelperImpl.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/high/payments/LNPaymentHelperImpl.java\n@@ -28,7 +28,7 @@\n         this.dbHandler = dbHandler;\n         this.eventHelper = contextFactory.getEventHelper();\n         this.serverObject = contextFactory.getServerSettings();\n-        configuration = serverObject.configuration;\n+        configuration = serverObject.getConfiguration();\n \n         this.eventHelper.addListener(new LNEventListener() {\n             @Override\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 13,
                        "snippet": {"text": "public int DEFAULT_REVOCATION_DELAY=2 * 7 * 24* 60* 60;\n"},
                        "endColumn": 63,
                        "startColumn": 4,
                        "startLine": 13,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/LNConfiguration.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _LNConfiguration.java_, class: _LNConfiguration_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: LNConfiguration.java, class: LNConfiguration has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/LNConfiguration.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/LNConfiguration.java\n@@ -10,7 +10,7 @@\n     public int MAX_FEE_PER_BYTE = 30;\n \n     public int MIN_REVOCATION_DELAY = 7 * 24 * 60 * 60;\n-    public int DEFAULT_REVOCATION_DELAY = 2 * 7 * 24 * 60 * 60;\n+    private int DEFAULT_REVOCATION_DELAY = 2 * 7 * 24 * 60 * 60;\n     public int MAX_REVOCATION_DELAY = 4 * 7 * 24 * 60 * 60;\n \n     public int MIN_REFUND_DELAY = 1 * 60 * 60;\n@@ -30,4 +30,8 @@\n     public int getTimeToReduceWhenRelayingPayment () {\n         return Tools.getRandom(DEFAULT_REFUND_DELAY * DEFAULT_OVERLAY_REFUND, MAX_REFUND_DELAY * MAX_OVERLAY_REFUND);\n     }\n+\n+\tpublic int getDEFAULT_REVOCATION_DELAY() {\n+\t\treturn DEFAULT_REVOCATION_DELAY;\n+\t}\n }\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 9,
                        "snippet": {"text": "public int DEFAULT_FEE_PER_BYTE=5;\n"},
                        "endColumn": 40,
                        "startColumn": 4,
                        "startLine": 9,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/LNConfiguration.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _LNConfiguration.java_, class: _LNConfiguration_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: LNConfiguration.java, class: LNConfiguration has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/LNConfiguration.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/LNConfiguration.java\n@@ -6,7 +6,7 @@\n     //Class for holding all the different settings with sane defaults set\n \n     public int MIN_FEE_PER_BYTE = 1;\n-    public int DEFAULT_FEE_PER_BYTE = 5;\n+    private int DEFAULT_FEE_PER_BYTE = 5;\n     public int MAX_FEE_PER_BYTE = 30;\n \n     public int MIN_REVOCATION_DELAY = 7 * 24 * 60 * 60;\n@@ -30,4 +30,8 @@\n     public int getTimeToReduceWhenRelayingPayment () {\n         return Tools.getRandom(DEFAULT_REFUND_DELAY * DEFAULT_OVERLAY_REFUND, MAX_REFUND_DELAY * MAX_OVERLAY_REFUND);\n     }\n+\n+\tpublic int getDEFAULT_FEE_PER_BYTE() {\n+\t\treturn DEFAULT_FEE_PER_BYTE;\n+\t}\n }\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 12,
                        "snippet": {"text": "public int MIN_REVOCATION_DELAY=7 * 24 * 60* 60;\n"},
                        "endColumn": 55,
                        "startColumn": 4,
                        "startLine": 12,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/LNConfiguration.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _LNConfiguration.java_, class: _LNConfiguration_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: LNConfiguration.java, class: LNConfiguration has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/LNConfiguration.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/LNConfiguration.java\n@@ -9,7 +9,7 @@\n     public int DEFAULT_FEE_PER_BYTE = 5;\n     public int MAX_FEE_PER_BYTE = 30;\n \n-    public int MIN_REVOCATION_DELAY = 7 * 24 * 60 * 60;\n+    private int MIN_REVOCATION_DELAY = 7 * 24 * 60 * 60;\n     public int DEFAULT_REVOCATION_DELAY = 2 * 7 * 24 * 60 * 60;\n     public int MAX_REVOCATION_DELAY = 4 * 7 * 24 * 60 * 60;\n \n@@ -30,4 +30,8 @@\n     public int getTimeToReduceWhenRelayingPayment () {\n         return Tools.getRandom(DEFAULT_REFUND_DELAY * DEFAULT_OVERLAY_REFUND, MAX_REFUND_DELAY * MAX_OVERLAY_REFUND);\n     }\n+\n+\tpublic int getMIN_REVOCATION_DELAY() {\n+\t\treturn MIN_REVOCATION_DELAY;\n+\t}\n }\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 22,
                        "snippet": {"text": "public int MAX_OVERLAY_REFUND=4;\n"},
                        "endColumn": 38,
                        "startColumn": 4,
                        "startLine": 22,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/LNConfiguration.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _LNConfiguration.java_, class: _LNConfiguration_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: LNConfiguration.java, class: LNConfiguration has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/LNConfiguration.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/LNConfiguration.java\n@@ -19,7 +19,7 @@\n \n     public int MIN_OVERLAY_REFUND = 2;\n     public int DEFAULT_OVERLAY_REFUND = 3;\n-    public int MAX_OVERLAY_REFUND = 4;\n+    private int MAX_OVERLAY_REFUND = 4;\n \n     public float MIN_FEE_PER_BYTE_CLOSING = 2;\n     public float DEFAULT_FEE_PER_BYTE_CLOSING = 5;\n@@ -30,4 +30,8 @@\n     public int getTimeToReduceWhenRelayingPayment () {\n         return Tools.getRandom(DEFAULT_REFUND_DELAY * DEFAULT_OVERLAY_REFUND, MAX_REFUND_DELAY * MAX_OVERLAY_REFUND);\n     }\n+\n+\tpublic int getMAX_OVERLAY_REFUND() {\n+\t\treturn MAX_OVERLAY_REFUND;\n+\t}\n }\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 25,
                        "snippet": {"text": "public float DEFAULT_FEE_PER_BYTE_CLOSING=5;\n"},
                        "endColumn": 50,
                        "startColumn": 4,
                        "startLine": 25,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/LNConfiguration.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _LNConfiguration.java_, class: _LNConfiguration_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: LNConfiguration.java, class: LNConfiguration has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/LNConfiguration.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/LNConfiguration.java\n@@ -22,7 +22,7 @@\n     public int MAX_OVERLAY_REFUND = 4;\n \n     public float MIN_FEE_PER_BYTE_CLOSING = 2;\n-    public float DEFAULT_FEE_PER_BYTE_CLOSING = 5;\n+    private float DEFAULT_FEE_PER_BYTE_CLOSING = 5;\n     public float MAX_FEE_PER_BYTE_CLOSING = 10;\n \n     public int MAX_DIFF_TIMESTAMPS = 60;\n@@ -30,4 +30,8 @@\n     public int getTimeToReduceWhenRelayingPayment () {\n         return Tools.getRandom(DEFAULT_REFUND_DELAY * DEFAULT_OVERLAY_REFUND, MAX_REFUND_DELAY * MAX_OVERLAY_REFUND);\n     }\n+\n+\tpublic float getDEFAULT_FEE_PER_BYTE_CLOSING() {\n+\t\treturn DEFAULT_FEE_PER_BYTE_CLOSING;\n+\t}\n }\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 24,
                        "snippet": {"text": "public float MIN_FEE_PER_BYTE_CLOSING=2;\n"},
                        "endColumn": 46,
                        "startColumn": 4,
                        "startLine": 24,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/LNConfiguration.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _LNConfiguration.java_, class: _LNConfiguration_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: LNConfiguration.java, class: LNConfiguration has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/LNConfiguration.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/LNConfiguration.java\n@@ -21,7 +21,7 @@\n     public int DEFAULT_OVERLAY_REFUND = 3;\n     public int MAX_OVERLAY_REFUND = 4;\n \n-    public float MIN_FEE_PER_BYTE_CLOSING = 2;\n+    private float MIN_FEE_PER_BYTE_CLOSING = 2;\n     public float DEFAULT_FEE_PER_BYTE_CLOSING = 5;\n     public float MAX_FEE_PER_BYTE_CLOSING = 10;\n \n@@ -30,4 +30,8 @@\n     public int getTimeToReduceWhenRelayingPayment () {\n         return Tools.getRandom(DEFAULT_REFUND_DELAY * DEFAULT_OVERLAY_REFUND, MAX_REFUND_DELAY * MAX_OVERLAY_REFUND);\n     }\n+\n+\tpublic float getMIN_FEE_PER_BYTE_CLOSING() {\n+\t\treturn MIN_FEE_PER_BYTE_CLOSING;\n+\t}\n }\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 10,
                        "snippet": {"text": "public int MAX_FEE_PER_BYTE=30;\n"},
                        "endColumn": 37,
                        "startColumn": 4,
                        "startLine": 10,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/LNConfiguration.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _LNConfiguration.java_, class: _LNConfiguration_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: LNConfiguration.java, class: LNConfiguration has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/LNConfiguration.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/LNConfiguration.java\n@@ -7,7 +7,7 @@\n \n     public int MIN_FEE_PER_BYTE = 1;\n     public int DEFAULT_FEE_PER_BYTE = 5;\n-    public int MAX_FEE_PER_BYTE = 30;\n+    private int MAX_FEE_PER_BYTE = 30;\n \n     public int MIN_REVOCATION_DELAY = 7 * 24 * 60 * 60;\n     public int DEFAULT_REVOCATION_DELAY = 2 * 7 * 24 * 60 * 60;\n@@ -30,4 +30,8 @@\n     public int getTimeToReduceWhenRelayingPayment () {\n         return Tools.getRandom(DEFAULT_REFUND_DELAY * DEFAULT_OVERLAY_REFUND, MAX_REFUND_DELAY * MAX_OVERLAY_REFUND);\n     }\n+\n+\tpublic int getMAX_FEE_PER_BYTE() {\n+\t\treturn MAX_FEE_PER_BYTE;\n+\t}\n }\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 8,
                        "snippet": {"text": "public int MIN_FEE_PER_BYTE=1;\n"},
                        "endColumn": 36,
                        "startColumn": 4,
                        "startLine": 8,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/LNConfiguration.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _LNConfiguration.java_, class: _LNConfiguration_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: LNConfiguration.java, class: LNConfiguration has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/high/payments/LNPaymentLogicImpl.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/high/payments/LNPaymentLogicImpl.java\n@@ -140,7 +140,7 @@\n         if (newStatus.csvDelay < configuration.MIN_REVOCATION_DELAY || newStatus.csvDelay > configuration.MAX_REVOCATION_DELAY) {\n             throw new LNPaymentException(\"Revocation delay not within allowed boundaries. Is: \" + newStatus.csvDelay);\n         }\n-        if (newStatus.feePerByte > configuration.MAX_FEE_PER_BYTE || newStatus.feePerByte < configuration.MIN_FEE_PER_BYTE) {\n+        if (newStatus.feePerByte > configuration.MAX_FEE_PER_BYTE || newStatus.feePerByte < configuration.getMIN_FEE_PER_BYTE()) {\n             throw new LNPaymentException(\"feePerByte not within allowed boundaries. Is: \" + newStatus.feePerByte);\n         }\n     }\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 16,
                        "snippet": {"text": "public int MIN_REFUND_DELAY=1 * 60 * 60;\n"},
                        "endColumn": 46,
                        "startColumn": 4,
                        "startLine": 16,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/LNConfiguration.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _LNConfiguration.java_, class: _LNConfiguration_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: LNConfiguration.java, class: LNConfiguration has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/LNConfiguration.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/LNConfiguration.java\n@@ -13,7 +13,7 @@\n     public int DEFAULT_REVOCATION_DELAY = 2 * 7 * 24 * 60 * 60;\n     public int MAX_REVOCATION_DELAY = 4 * 7 * 24 * 60 * 60;\n \n-    public int MIN_REFUND_DELAY = 1 * 60 * 60;\n+    private int MIN_REFUND_DELAY = 1 * 60 * 60;\n     public int DEFAULT_REFUND_DELAY = 3 * 60 * 60;\n     public int MAX_REFUND_DELAY = 12 * 60 * 60;\n \n@@ -30,4 +30,8 @@\n     public int getTimeToReduceWhenRelayingPayment () {\n         return Tools.getRandom(DEFAULT_REFUND_DELAY * DEFAULT_OVERLAY_REFUND, MAX_REFUND_DELAY * MAX_OVERLAY_REFUND);\n     }\n+\n+\tpublic int getMIN_REFUND_DELAY() {\n+\t\treturn MIN_REFUND_DELAY;\n+\t}\n }\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 14,
                        "snippet": {"text": "public int MAX_REVOCATION_DELAY=4 * 7 * 24* 60* 60;\n"},
                        "endColumn": 59,
                        "startColumn": 4,
                        "startLine": 14,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/LNConfiguration.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _LNConfiguration.java_, class: _LNConfiguration_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: LNConfiguration.java, class: LNConfiguration has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/high/payments/LNPaymentLogicImpl.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/high/payments/LNPaymentLogicImpl.java\n@@ -137,7 +137,7 @@\n                 throw new LNPaymentException(\"Refund timeout is too short. Is: \" + diff);\n             }\n         }\n-        if (newStatus.csvDelay < configuration.MIN_REVOCATION_DELAY || newStatus.csvDelay > configuration.MAX_REVOCATION_DELAY) {\n+        if (newStatus.csvDelay < configuration.MIN_REVOCATION_DELAY || newStatus.csvDelay > configuration.getMAX_REVOCATION_DELAY()) {\n             throw new LNPaymentException(\"Revocation delay not within allowed boundaries. Is: \" + newStatus.csvDelay);\n         }\n         if (newStatus.feePerByte > configuration.MAX_FEE_PER_BYTE || newStatus.feePerByte < configuration.MIN_FEE_PER_BYTE) {\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 18,
                        "snippet": {"text": "public int MAX_REFUND_DELAY=12 * 60 * 60;\n"},
                        "endColumn": 47,
                        "startColumn": 4,
                        "startLine": 18,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/LNConfiguration.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _LNConfiguration.java_, class: _LNConfiguration_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: LNConfiguration.java, class: LNConfiguration has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/ThunderContext.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/ThunderContext.java\n@@ -115,7 +115,7 @@\n             paymentData.secret = secret;\n             paymentData.timestampOpen = Tools.currentTime();\n             paymentData.timestampRefund = Tools.currentTime() + route.size()\n-                    * configuration.MAX_REFUND_DELAY * configuration.MAX_OVERLAY_REFUND;\n+                    * configuration.getMAX_REFUND_DELAY() * configuration.MAX_OVERLAY_REFUND;\n \n             paymentHelper.makePayment(paymentData);\n         } catch (Exception e) {\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 20,
                        "snippet": {"text": "public int MIN_OVERLAY_REFUND=2;\n"},
                        "endColumn": 38,
                        "startColumn": 4,
                        "startLine": 20,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/LNConfiguration.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _LNConfiguration.java_, class: _LNConfiguration_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: LNConfiguration.java, class: LNConfiguration has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/high/payments/LNPaymentLogicImpl.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/high/payments/LNPaymentLogicImpl.java\n@@ -133,7 +133,7 @@\n                 throw new LNPaymentException(\"Refund timeout is too large. Is: \" + diff);\n             }\n             //TODO Think about how we can solve guessing here, about us being the final receiver..\n-            if (diff < configuration.MIN_OVERLAY_REFUND * configuration.MIN_REFUND_DELAY) {\n+            if (diff < configuration.getMIN_OVERLAY_REFUND() * configuration.MIN_REFUND_DELAY) {\n                 throw new LNPaymentException(\"Refund timeout is too short. Is: \" + diff);\n             }\n         }\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 28,
                        "snippet": {"text": "public int MAX_DIFF_TIMESTAMPS=60;\n"},
                        "endColumn": 40,
                        "startColumn": 4,
                        "startLine": 28,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/LNConfiguration.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _LNConfiguration.java_, class: _LNConfiguration_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: LNConfiguration.java, class: LNConfiguration has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/LNConfiguration.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/LNConfiguration.java\n@@ -25,9 +25,13 @@\n     public float DEFAULT_FEE_PER_BYTE_CLOSING = 5;\n     public float MAX_FEE_PER_BYTE_CLOSING = 10;\n \n-    public int MAX_DIFF_TIMESTAMPS = 60;\n+    private int MAX_DIFF_TIMESTAMPS = 60;\n \n     public int getTimeToReduceWhenRelayingPayment () {\n         return Tools.getRandom(DEFAULT_REFUND_DELAY * DEFAULT_OVERLAY_REFUND, MAX_REFUND_DELAY * MAX_OVERLAY_REFUND);\n     }\n+\n+\tpublic int getMAX_DIFF_TIMESTAMPS() {\n+\t\treturn MAX_DIFF_TIMESTAMPS;\n+\t}\n }\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 26,
                        "snippet": {"text": "public float MAX_FEE_PER_BYTE_CLOSING=10;\n"},
                        "endColumn": 47,
                        "startColumn": 4,
                        "startLine": 26,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/LNConfiguration.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _LNConfiguration.java_, class: _LNConfiguration_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: LNConfiguration.java, class: LNConfiguration has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/LNConfiguration.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/LNConfiguration.java\n@@ -23,11 +23,15 @@\n \n     public float MIN_FEE_PER_BYTE_CLOSING = 2;\n     public float DEFAULT_FEE_PER_BYTE_CLOSING = 5;\n-    public float MAX_FEE_PER_BYTE_CLOSING = 10;\n+    private float MAX_FEE_PER_BYTE_CLOSING = 10;\n \n     public int MAX_DIFF_TIMESTAMPS = 60;\n \n     public int getTimeToReduceWhenRelayingPayment () {\n         return Tools.getRandom(DEFAULT_REFUND_DELAY * DEFAULT_OVERLAY_REFUND, MAX_REFUND_DELAY * MAX_OVERLAY_REFUND);\n     }\n+\n+\tpublic float getMAX_FEE_PER_BYTE_CLOSING() {\n+\t\treturn MAX_FEE_PER_BYTE_CLOSING;\n+\t}\n }\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 26,
                        "snippet": {"text": "public ResultCommand resultCallback=new NullResultCommand();\n"},
                        "endColumn": 66,
                        "startColumn": 4,
                        "startLine": 26,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/ClientObject.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _ClientObject.java_, class: _ClientObject_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: ClientObject.java, class: ClientObject has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/middle/peerseed/PeerSeedProcessorImpl.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/middle/peerseed/PeerSeedProcessorImpl.java\n@@ -84,7 +84,7 @@\n             fireIPEvents(list);\n \n             if (!node.isServer && node.intent == ConnectionIntent.GET_IPS) {\n-                node.resultCallback.execute(new PeerSeedResult());\n+                node.getResultCallback().execute(new PeerSeedResult());\n                 messageExecutor.closeConnection();\n             }\n         }\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 18,
                        "snippet": {"text": "public NodeKey nodeKey;\n"},
                        "endColumn": 27,
                        "startColumn": 4,
                        "startLine": 18,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/ClientObject.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _ClientObject.java_, class: _ClientObject_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: ClientObject.java, class: ClientObject has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/PipelineInitialiser.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/PipelineInitialiser.java\n@@ -32,7 +32,7 @@\n         if (serverMode) {\n             node = new ClientObject();\n             node.isServer = true;\n-            node.nodeKey = null;\n+            node.setNodeKey(null);\n         }\n //        ch.pipeline().addLast(new DumpHexHandler());\n \n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 31,
                        "snippet": {"text": "public String host;\n"},
                        "endColumn": 23,
                        "startColumn": 4,
                        "startLine": 31,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/ClientObject.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _ClientObject.java_, class: _ClientObject_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: ClientObject.java, class: ClientObject has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/ServerObject.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/ServerObject.java\n@@ -20,7 +20,7 @@\n     public ServerObject (ClientObject node) {\n         init();\n         this.portServer = node.port;\n-        this.hostServer = node.host;\n+        this.hostServer = node.getHost();\n         this.pubKeyServer = node.nodeKey.nodeKey;\n     }\n \n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 22,
                        "snippet": {"text": "public ECKey ephemeralKeyClient;\n"},
                        "endColumn": 36,
                        "startColumn": 4,
                        "startLine": 22,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/ClientObject.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _ClientObject.java_, class: _ClientObject_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: ClientObject.java, class: ClientObject has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/ClientObject.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/ClientObject.java\n@@ -19,7 +19,7 @@\n \n     //Encryption keys\n     public ECKey ephemeralKeyServer;\n-    public ECKey ephemeralKeyClient;\n+    private ECKey ephemeralKeyClient;\n     public ECDHKeySet ecdhKeySet;\n \n     public ConnectionIntent intent = ConnectionIntent.MISC;\n@@ -86,4 +86,12 @@\n                 \", isServer=\" + isServer +\n                 '}';\n     }\n+\n+\tpublic ECKey getEphemeralKeyClient() {\n+\t\treturn ephemeralKeyClient;\n+\t}\n+\n+\tpublic void setEphemeralKeyClient(ECKey ephemeralKeyClient) {\n+\t\tthis.ephemeralKeyClient = ephemeralKeyClient;\n+\t}\n }\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 16,
                        "snippet": {"text": "public boolean isServer;\n"},
                        "endColumn": 28,
                        "startColumn": 4,
                        "startLine": 16,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/ClientObject.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _ClientObject.java_, class: _ClientObject_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: ClientObject.java, class: ClientObject has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/ConnectionManagerImpl.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/ConnectionManagerImpl.java\n@@ -310,7 +310,7 @@\n \n     private ClientObject ipObjectToNode (PubkeyIPObject ipObject, ConnectionIntent intent) {\n         ClientObject node = new ClientObject();\n-        node.isServer = false;\n+        node.setIsServer(false);\n         node.intent = intent;\n         node.nodeKey = new NodeKey(ipObject.pubkey);\n         node.host = ipObject.hostname;\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 23,
                        "snippet": {"text": "public ECDHKeySet ecdhKeySet;\n"},
                        "endColumn": 33,
                        "startColumn": 4,
                        "startLine": 23,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/ClientObject.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _ClientObject.java_, class: _ClientObject_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: ClientObject.java, class: ClientObject has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/ClientObject.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/ClientObject.java\n@@ -20,7 +20,7 @@\n     //Encryption keys\n     public ECKey ephemeralKeyServer;\n     public ECKey ephemeralKeyClient;\n-    public ECDHKeySet ecdhKeySet;\n+    private ECDHKeySet ecdhKeySet;\n \n     public ConnectionIntent intent = ConnectionIntent.MISC;\n     public ResultCommand resultCallback = new NullResultCommand();\n@@ -86,4 +86,12 @@\n                 \", isServer=\" + isServer +\n                 '}';\n     }\n+\n+\tpublic ECDHKeySet getEcdhKeySet() {\n+\t\treturn ecdhKeySet;\n+\t}\n+\n+\tpublic void setEcdhKeySet(ECDHKeySet ecdhKeySet) {\n+\t\tthis.ecdhKeySet = ecdhKeySet;\n+\t}\n }\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 32,
                        "snippet": {"text": "public int port;\n"},
                        "endColumn": 20,
                        "startColumn": 4,
                        "startLine": 32,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/ClientObject.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _ClientObject.java_, class: _ClientObject_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: ClientObject.java, class: ClientObject has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/etc/SeedNodes.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/etc/SeedNodes.java\n@@ -43,7 +43,7 @@\n         ClientObject node = new ClientObject();\n         node.init();\n         node.host = \"localhost\";\n-        node.port = Constants.STANDARD_PORT;\n+        node.setPort(Constants.STANDARD_PORT);\n \n         PubkeyIPObject seed1 = new PubkeyIPObject();\n         seed1.hostname = \"localhost\";\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 21,
                        "snippet": {"text": "public ECKey ephemeralKeyServer;\n"},
                        "endColumn": 36,
                        "startColumn": 4,
                        "startLine": 21,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/ClientObject.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _ClientObject.java_, class: _ClientObject_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: ClientObject.java, class: ClientObject has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/ClientObject.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/ClientObject.java\n@@ -18,7 +18,7 @@\n     public NodeKey nodeKey;\n \n     //Encryption keys\n-    public ECKey ephemeralKeyServer;\n+    private ECKey ephemeralKeyServer;\n     public ECKey ephemeralKeyClient;\n     public ECDHKeySet ecdhKeySet;\n \n@@ -86,4 +86,8 @@\n                 \", isServer=\" + isServer +\n                 '}';\n     }\n+\n+\tpublic ECKey getEphemeralKeyServer() {\n+\t\treturn ephemeralKeyServer;\n+\t}\n }\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 24,
                        "snippet": {"text": "public RevocationHash revoHashServerCurrent;\n"},
                        "endColumn": 48,
                        "startColumn": 4,
                        "startLine": 24,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/layer/high/ChannelStatus.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _ChannelStatus.java_, class: _ChannelStatus_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: ChannelStatus.java, class: ChannelStatus has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/database/hibernate/ChannelEntity.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/database/hibernate/ChannelEntity.java\n@@ -297,8 +297,8 @@\n         channelStatus.csvDelay = csvDelay;\n         channelStatus.revoHashClientCurrent = revoHashClientCurrent == null ? null\n                 : revoHashClientCurrent.toRevocationHash();\n-        channelStatus.revoHashServerCurrent = revoHashServerCurrent == null ? null\n-                : revoHashServerCurrent.toRevocationHash();\n+        channelStatus.setRevoHashServerCurrent(revoHashServerCurrent == null ? null\n+                : revoHashServerCurrent.toRevocationHash());\n         channelStatus.revoHashClientNext = revoHashClientNext == null ? null\n                 : revoHashClientNext.toRevocationHash();\n         channelStatus.revoHashServerNext = revoHashServerNext == null ? null\n@@ -316,8 +316,8 @@\n         if (channelStatus.revoHashClientCurrent != null) {\n             revoHashClientCurrent = new RevocationHashEmbedded(channelStatus.revoHashClientCurrent);\n         }\n-        if (channelStatus.revoHashServerCurrent != null) {\n-            revoHashServerCurrent = new RevocationHashEmbedded(channelStatus.revoHashServerCurrent);\n+        if (channelStatus.getRevoHashServerCurrent() != null) {\n+            revoHashServerCurrent = new RevocationHashEmbedded(channelStatus.getRevoHashServerCurrent());\n         }\n         if (channelStatus.revoHashClientNext != null) {\n             revoHashClientNext = new RevocationHashEmbedded(channelStatus.revoHashClientNext);\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 28,
                        "snippet": {"text": "public RevocationHash revoHashServerNext;\n"},
                        "endColumn": 45,
                        "startColumn": 4,
                        "startLine": 28,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/layer/high/ChannelStatus.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _ChannelStatus.java_, class: _ChannelStatus_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: ChannelStatus.java, class: ChannelStatus has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/high/channel/establish/messages/LNEstablishMessageFactoryImpl.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/high/channel/establish/messages/LNEstablishMessageFactoryImpl.java\n@@ -13,7 +13,7 @@\n                 channel.keyServer,\n                 channel.anchorTx,\n                 channel.channelStatus.revoHashServerCurrent,\n-                channel.channelStatus.revoHashServerNext,\n+                channel.channelStatus.getRevoHashServerNext(),\n                 channel.channelStatus.amountClient,\n                 channel.channelStatus.amountServer,\n                 0,  //TODO add some reasonable minConfirmations\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 36,
                        "snippet": {"text": "public Address addressServer;\n"},
                        "endColumn": 33,
                        "startColumn": 4,
                        "startLine": 36,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/layer/high/ChannelStatus.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _ChannelStatus.java_, class: _ChannelStatus_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: ChannelStatus.java, class: ChannelStatus has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/high/channel/establish/LNEstablishProcessorImpl.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/high/channel/establish/LNEstablishProcessorImpl.java\n@@ -109,7 +109,7 @@\n  *  In:\n  *  txInA1\n  *  txInA2\n- *  [?]\n+ *  [???]\n  *\n  *  Out:\n  *  2-of-2\n@@ -119,10 +119,10 @@\n  *  In:\n  *  txInA1\n  *  txInA2\n- *  [?]\n+ *  [???]\n  *  txInB1\n  *  txInB2\n- *  [?]\n+ *  [???]\n  *\n  *  Out:\n  *  2-of-2\n@@ -381,7 +381,7 @@\n         establishProgress.channel.getAnchorTransactionServer(walletHelper);\n         establishProgress.channel.channelStatus.revoHashServerCurrent = new RevocationHash(0, establishProgress.channel.masterPrivateKeyServer);\n         establishProgress.channel.channelStatus.revoHashServerNext = new RevocationHash(1, establishProgress.channel.masterPrivateKeyServer);\n-        establishProgress.channel.channelStatus.addressServer = walletHelper.fetchAddress();\n+  establishProgress.channel.channelStatus.setAddressServer(ver = walletHelper.fetchAdd)ress();\n         LNEstablish message = messageFactory.getEstablishMessageA(establishProgress.channel);\n         establishProgress.messages.add(message);\n         messageExecutor.sendMessageUpwards(message);\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 14,
                        "snippet": {"text": "public long amountServer;\n"},
                        "endColumn": 29,
                        "startColumn": 4,
                        "startLine": 14,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/layer/high/ChannelStatus.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _ChannelStatus.java_, class: _ChannelStatus_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: ChannelStatus.java, class: ChannelStatus has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/high/channel/establish/messages/LNEstablishMessageFactoryImpl.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/high/channel/establish/messages/LNEstablishMessageFactoryImpl.java\n@@ -15,7 +15,7 @@\n                 channel.channelStatus.revoHashServerCurrent,\n                 channel.channelStatus.revoHashServerNext,\n                 channel.channelStatus.amountClient,\n-                channel.channelStatus.amountServer,\n+                channel.channelStatus.getAmountServer(),\n                 0,  //TODO add some reasonable minConfirmations\n                 channel.channelStatus.addressServer,\n                 channel.channelStatus.feePerByte,\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 18,
                        "snippet": {"text": "public int feePerByte;\n"},
                        "endColumn": 26,
                        "startColumn": 4,
                        "startLine": 18,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/layer/high/ChannelStatus.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _ChannelStatus.java_, class: _ChannelStatus_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: ChannelStatus.java, class: ChannelStatus has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/database/hibernate/ChannelEntity.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/database/hibernate/ChannelEntity.java\n@@ -293,7 +293,7 @@\n         channelStatus.paymentList = paymentList.stream()\n                 .map(PaymentDataEntity::toPaymentData)\n                 .collect(Collectors.toList());\n-        channelStatus.feePerByte = feePerByte;\n+        channelStatus.setFeePerByte(feePerByte);\n         channelStatus.csvDelay = csvDelay;\n         channelStatus.revoHashClientCurrent = revoHashClientCurrent == null ? null\n                 : revoHashClientCurrent.toRevocationHash();\n@@ -311,7 +311,7 @@\n     private void fromChannelStatus (ChannelStatus channelStatus) {\n         amountClient = channelStatus.amountClient;\n         amountServer = channelStatus.amountServer;\n-        feePerByte = channelStatus.feePerByte;\n+        feePerByte = channelStatus.getFeePerByte();\n         csvDelay = channelStatus.csvDelay;\n         if (channelStatus.revoHashClientCurrent != null) {\n             revoHashClientCurrent = new RevocationHashEmbedded(channelStatus.revoHashClientCurrent);\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 35,
                        "snippet": {"text": "public Address addressClient;\n"},
                        "endColumn": 33,
                        "startColumn": 4,
                        "startLine": 35,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/layer/high/ChannelStatus.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _ChannelStatus.java_, class: _ChannelStatus_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: ChannelStatus.java, class: ChannelStatus has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/high/channel/establish/messages/LNEstablishAMessage.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/high/channel/establish/messages/LNEstablishAMessage.java\n@@ -61,7 +61,7 @@\n \n             channel.keyClient = ECKey.fromPublicOnly(channelKeyServer);\n             channel.anchorTx = newAnchorTx;\n-            channel.channelStatus.addressClient = new Address(Constants.getNetwork(), addressBytes);\n+            channel.channelStatus.setAddressClient(new Address(Constants.getNetwork(), addressBytes));\n             channel.channelStatus.revoHashClientCurrent = revocationHash;\n             channel.channelStatus.revoHashClientNext = revocationHashNext;\n             channel.channelStatus.csvDelay = csvDelay;\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 13,
                        "snippet": {"text": "public long amountClient;\n"},
                        "endColumn": 29,
                        "startColumn": 4,
                        "startLine": 13,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/layer/high/ChannelStatus.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _ChannelStatus.java_, class: _ChannelStatus_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: ChannelStatus.java, class: ChannelStatus has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/high/channel/close/LNCloseProcessorImpl.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/high/channel/close/LNCloseProcessorImpl.java\n@@ -85,7 +85,7 @@\n         //Rather use a copy here to not run into concurrency issues somewhere else..\n         ChannelStatus temp = channelStatus.copy();\n \n-        long amountClient = temp.amountClient;\n+        long amountClient = temp.getAmountClient();\n         long amountServer = temp.amountServer;\n \n         for (PaymentData paymentData : temp.paymentList) {\n@@ -93,7 +93,7 @@\n         }\n \n         temp.paymentList.clear();\n-        temp.amountClient = amountClient;\n+        temp.setAmountClient(amountClient);\n         temp.amountServer = amountServer;\n \n         return temp;\n@@ -107,7 +107,7 @@\n         //TODO deduct the transaction fee correctly from both amounts\n         //TODO would be better to have another address on file that we can use here..\n         long feePerParty = (Tools.getTransactionFees(2, 2, feePerByte) / 2);\n-        transaction.addOutput(Coin.valueOf(channelStatus.amountClient - feePerParty), channel.channelStatus.addressClient);\n+        transaction.addOutput(Coin.valueOf(channelStatus.getAmountClient() - feePerParty), channel.channelStatus.addressClient);\n         transaction.addOutput(Coin.valueOf(channelStatus.amountServer - feePerParty), channel.channelStatus.addressServer);\n         return Tools.applyBIP69(transaction);\n     }\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 23,
                        "snippet": {"text": "public RevocationHash revoHashClientCurrent;\n"},
                        "endColumn": 48,
                        "startColumn": 4,
                        "startLine": 23,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/layer/high/ChannelStatus.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _ChannelStatus.java_, class: _ChannelStatus_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: ChannelStatus.java, class: ChannelStatus has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/high/ChannelStatus.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/high/ChannelStatus.java\n@@ -20,7 +20,7 @@\n \n     //Various revocation hashes are stored here. They get swapped downwards after an exchange (Next->Current; NextNext->Next)\n     //Current revocation hash is the one that we have a current valid channel transaction with\n-    public RevocationHash revoHashClientCurrent;\n+    private RevocationHash revoHashClientCurrent;\n     public RevocationHash revoHashServerCurrent;\n \n     //Next revocation hash is the hash used when creating a new channel transaction\n@@ -189,4 +189,12 @@\n         s = s.substring(0, s.length() - 2);\n         return s;\n     }\n+\n+\tpublic RevocationHash getRevoHashClientCurrent() {\n+\t\treturn revoHashClientCurrent;\n+\t}\n+\n+\tpublic void setRevoHashClientCurrent(RevocationHash revoHashClientCurrent) {\n+\t\tthis.revoHashClientCurrent = revoHashClientCurrent;\n+\t}\n }\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 27,
                        "snippet": {"text": "public RevocationHash revoHashClientNext;\n"},
                        "endColumn": 45,
                        "startColumn": 4,
                        "startLine": 27,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/layer/high/ChannelStatus.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _ChannelStatus.java_, class: _ChannelStatus_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: ChannelStatus.java, class: ChannelStatus has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/high/Channel.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/high/Channel.java\n@@ -195,7 +195,7 @@\n         keyClient = channel.keyServer;\n         channelStatus.addressClient = channel.channelStatus.addressServer;\n         channelStatus.revoHashClientCurrent = channel.channelStatus.revoHashServerCurrent;\n-        channelStatus.revoHashClientNext = channel.channelStatus.revoHashServerNext;\n+        channelStatus.setRevoHashClientNext(channel.channelStatus.revoHashServerNext);\n         anchorTx = channel.anchorTx;\n         anchorTxHash = channel.anchorTxHash;\n \n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 19,
                        "snippet": {"text": "public int csvDelay;\n"},
                        "endColumn": 24,
                        "startColumn": 4,
                        "startLine": 19,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/layer/high/ChannelStatus.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _ChannelStatus.java_, class: _ChannelStatus_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: ChannelStatus.java, class: ChannelStatus has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/high/channel/establish/messages/LNEstablishMessageFactoryImpl.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/high/channel/establish/messages/LNEstablishMessageFactoryImpl.java\n@@ -19,7 +19,7 @@\n                 0,  //TODO add some reasonable minConfirmations\n                 channel.channelStatus.addressServer,\n                 channel.channelStatus.feePerByte,\n-                channel.channelStatus.csvDelay);\n+                channel.channelStatus.getCsvDelay());\n         return message;\n     }\n \n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 39,
                        "snippet": {"text": "public int id;\n"},
                        "endColumn": 18,
                        "startColumn": 4,
                        "startLine": 39,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/layer/high/Channel.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _Channel.java_, class: _Channel_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: Channel.java, class: Channel has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/database/hibernate/ChannelEntity.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/database/hibernate/ChannelEntity.java\n@@ -76,7 +76,7 @@\n         });\n \n         Channel channel = new Channel();\n-        channel.id = id;\n+        channel.setId(id);\n         channel.nodeKeyClient = nodeKeyClient;\n         channel.keyClient = keyClient;\n         channel.keyServer = keyServer;\n@@ -99,7 +99,7 @@\n     }\n \n     public ChannelEntity (Channel channel) {\n-        id = channel.id;\n+        id = channel.getId();\n         hash = channel.getHash();\n         nodeKeyClient = channel.nodeKeyClient;\n         keyClient = channel.keyClient;\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 40,
                        "snippet": {"text": "public NodeKey nodeKeyClient;\n"},
                        "endColumn": 33,
                        "startColumn": 4,
                        "startLine": 40,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/layer/high/Channel.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _Channel.java_, class: _Channel_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: Channel.java, class: Channel has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/MainNode.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/MainNode.java\n@@ -96,7 +96,7 @@\n                 buildChannelListener.await(30, TimeUnit.SECONDS);\n                 List<Channel> openChannel = dbHandler.getOpenChannel();\n                 for (Channel channel : openChannel) {\n-                    configuration.nodesToBuildChannelWith.add(channel.nodeKeyClient.getPubKeyHex());\n+                    configuration.nodesToBuildChannelWith.add(channel.getNodeKeyClient().getPubKeyHex());\n                 }\n                 writeConfigurationFile(configuration);\n             } else {\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 65,
                        "snippet": {"text": "public int timestampOpen;\n"},
                        "endColumn": 29,
                        "startColumn": 4,
                        "startLine": 65,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/layer/high/Channel.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _Channel.java_, class: _Channel_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: Channel.java, class: Channel has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-clientgui/src/main/java/wallettemplate/ChannelInfoController.java\n+++ /workspace/source/thunder-clientgui/src/main/java/wallettemplate/ChannelInfoController.java\n@@ -78,7 +78,7 @@\n         balanceClient.setText(Coin.valueOf(channel.channelStatus.amountClient).toFriendlyString());\n         balanceServer.setText(Coin.valueOf(channel.channelStatus.amountServer).toFriendlyString());\n \n-        labelOpen.setText(new Date(((long) channel.timestampOpen) * 1000).toString());\n+        labelOpen.setText(new Date(((long) channel.getTimestampOpen()) * 1000).toString());\n \n         txOpen.setText(Tools.bytesToHex(channel.anchorTx.bitcoinSerialize()));\n \n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 75,
                        "snippet": {"text": "public ChannelStatus channelStatus;\n"},
                        "endColumn": 39,
                        "startColumn": 4,
                        "startLine": 75,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/layer/high/Channel.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _Channel.java_, class: _Channel_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: Channel.java, class: Channel has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/high/payments/LNPaymentLogicImpl.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/high/payments/LNPaymentLogicImpl.java\n@@ -107,7 +107,7 @@\n     @Override\n     public void checkUpdate (LNConfiguration configuration, Channel channel, ChannelUpdate channelUpdate) {\n         //We can have a lot of operations here, like adding/removing payments. We need to verify if they are correct.\n-        ChannelStatus oldStatus = channel.channelStatus;\n+        ChannelStatus oldStatus = channel.getChannelStatus();\n         ChannelStatus newStatus = oldStatus.copy();\n         newStatus.applyUpdate(channelUpdate);\n \n@@ -180,13 +180,13 @@\n         if (side == SERVER) {\n             return this.getChannelTransaction(\n                     new TransactionOutPoint(Constants.getNetwork(), 0, channel.anchorTxHash),\n-                    channel.channelStatus,\n+                    channel.getChannelStatus(),\n                     channel.keyClient,\n                     channel.keyServer);\n         } else {\n             return this.getChannelTransaction(\n                     new TransactionOutPoint(Constants.getNetwork(), 0, channel.anchorTxHash),\n-                    channel.channelStatus.reverse(),\n+                    channel.getChannelStatus().reverse(),\n                     channel.keyServer,\n                     channel.keyClient);\n         }\n@@ -205,13 +205,13 @@\n         if (side == SERVER) {\n             return this.getPaymentTransactions(\n                     channelTx.getHash(),\n-                    channel.channelStatus,\n+                    channel.getChannelStatus(),\n                     channel.keyServer,\n                     channel.keyClient);\n         } else {\n             return this.getPaymentTransactions(\n                     channelTx.getHash(),\n-                    channel.channelStatus.reverse(),\n+                    channel.getChannelStatus().reverse(),\n                     channel.keyClient,\n                     channel.keyServer);\n         }\n@@ -229,7 +229,7 @@\n                     channelSignatures,\n                     channelTx,\n                     paymentTx,\n-                    channel.channelStatus);\n+                    channel.getChannelStatus());\n         } else {\n             this.checkSignatures(\n                     channel.keyClient,\n@@ -237,7 +237,7 @@\n                     channelSignatures,\n                     channelTx,\n                     paymentTx,\n-                    channel.channelStatus.reverse());\n+                    channel.getChannelStatus().reverse());\n         }\n     }\n \n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 72,
                        "snippet": {"text": "public Transaction anchorTx;\n"},
                        "endColumn": 32,
                        "startColumn": 4,
                        "startLine": 72,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/layer/high/Channel.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _Channel.java_, class: _Channel_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: Channel.java, class: Channel has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/database/hibernate/ChannelEntity.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/database/hibernate/ChannelEntity.java\n@@ -86,7 +86,7 @@\n         channel.timestampOpen = timestampOpen;\n         channel.timestampForceClose = timestampForceClose;\n         channel.anchorTxHash = anchorTxHash;\n-        channel.anchorTx = anchorTx;\n+        channel.setAnchorTx(anchorTx);\n         channel.minConfirmationAnchor = minConfirmationAnchor;\n         channel.channelStatus = toChannelStatus();\n         channel.channelSignatures = localChannelSignatures;\n@@ -109,7 +109,7 @@\n         shaChainDepthCurrent = channel.shaChainDepthCurrent;\n         timestampOpen = channel.timestampOpen;\n         timestampForceClose = channel.timestampForceClose;\n-        anchorTx = channel.anchorTx;\n+        anchorTx = channel.getAnchorTx();\n         anchorTxHash = channel.anchorTxHash;\n         minConfirmationAnchor = channel.minConfirmationAnchor;\n         if (channel.channelStatus != null) {\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 58,
                        "snippet": {"text": "public int shaChainDepthCurrent;\n"},
                        "endColumn": 36,
                        "startColumn": 4,
                        "startLine": 58,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/layer/high/Channel.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _Channel.java_, class: _Channel_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: Channel.java, class: Channel has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/high/Channel.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/high/Channel.java\n@@ -55,7 +55,7 @@\n      * When we open the channel we set the index to some high value and decrease it every X hours.\n      * Whenever we commit to a new version of the channel, we use a new child derived from the index.\n      */\n-    public int shaChainDepthCurrent;\n+    private int shaChainDepthCurrent;\n \n     /*\n      * Timestamps for the channel management.\n@@ -232,5 +232,13 @@\n \n     }\n \n+\tpublic int getShaChainDepthCurrent() {\n+\t\treturn shaChainDepthCurrent;\n+\t}\n+\n+\tpublic void setShaChainDepthCurrent(int shaChainDepthCurrent) {\n+\t\tthis.shaChainDepthCurrent = shaChainDepthCurrent;\n+\t}\n+\n     //endregion\n }\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 76,
                        "snippet": {"text": "public ChannelSignatures channelSignatures=new ChannelSignatures();\n"},
                        "endColumn": 73,
                        "startColumn": 4,
                        "startLine": 76,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/layer/high/Channel.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _Channel.java_, class: _Channel_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: Channel.java, class: Channel has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/high/channel/establish/LNEstablishProcessorImpl.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/high/channel/establish/LNEstablishProcessorImpl.java\n@@ -109,7 +109,7 @@\n  *  In:\n  *  txInA1\n  *  txInA2\n- *  [?]\n+ *  [???]\n  *\n  *  Out:\n  *  2-of-2\n@@ -119,10 +119,10 @@\n  *  In:\n  *  txInA1\n  *  txInA2\n- *  [?]\n+ *  [???]\n  *  txInB1\n  *  txInB2\n- *  [?]\n+ *  [???]\n  *\n  *  Out:\n  *  2-of-2\n@@ -295,7 +295,7 @@\n             paymentLogic.checkSignatures(\n                     establishProgress.channel.keyServer,\n                     establishProgress.channel.keyClient,\n-                    establishProgress.channel.channelSignatures,\n+                    establishProgress.chgetChannelSignatures()atures,\n                     channelTransaction,\n                     Collections.emptyList(),\n                     establishProgress.channel.channelStatus\n@@ -396,7 +396,7 @@\n                 establishProgress.channel.keyClient\n         );\n \n-        establishProgress.channel.channelSignatures = paymentLogic.getSignatureObject(establishProgress.channel, channelTransaction, Collections.emptyList());\n+  establishProgress.channel.setChannelSignatures(res = paymentLogic.getSignatureObject(establishProgress.channel, channelTransaction, Collections.emptyL)ist());\n \n         LNEstablish message = messageFactory.getEstablishMessageB(establishProgress.channel.channelSignatures.channelSignatures.get(0));\n         establishProgress.messages.add(message);\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 66,
                        "snippet": {"text": "public int timestampForceClose;\n"},
                        "endColumn": 35,
                        "startColumn": 4,
                        "startLine": 66,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/layer/high/Channel.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _Channel.java_, class: _Channel_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: Channel.java, class: Channel has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/high/Channel.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/high/Channel.java\n@@ -63,7 +63,7 @@\n      * It is easy to keep track when to force broadcast a channel to the blockchain this way.\n      */\n     public int timestampOpen;\n-    public int timestampForceClose;\n+    private int timestampForceClose;\n     /*\n      * We also want to save the actual transactions as soon as we see them on the network / create them.\n      * While this might not be completely necessary, it allows for efficient lookup in case anything goes wrong and we need it.\n@@ -232,5 +232,13 @@\n \n     }\n \n+\tpublic int getTimestampForceClose() {\n+\t\treturn timestampForceClose;\n+\t}\n+\n+\tpublic void setTimestampForceClose(int timestampForceClose) {\n+\t\tthis.timestampForceClose = timestampForceClose;\n+\t}\n+\n     //endregion\n }\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 46,
                        "snippet": {"text": "public ECKey keyClient;\n"},
                        "endColumn": 27,
                        "startColumn": 4,
                        "startLine": 46,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/layer/high/Channel.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _Channel.java_, class: _Channel_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: Channel.java, class: Channel has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/database/hibernate/ChannelEntity.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/database/hibernate/ChannelEntity.java\n@@ -78,7 +78,7 @@\n         Channel channel = new Channel();\n         channel.id = id;\n         channel.nodeKeyClient = nodeKeyClient;\n-        channel.keyClient = keyClient;\n+        channel.setKeyClient(keyClient);\n         channel.keyServer = keyServer;\n         channel.masterPrivateKeyClient = masterPrivateKeyClient;\n         channel.masterPrivateKeyServer = masterPrivateKeyServer;\n@@ -102,7 +102,7 @@\n         id = channel.id;\n         hash = channel.getHash();\n         nodeKeyClient = channel.nodeKeyClient;\n-        keyClient = channel.keyClient;\n+        keyClient = channel.getKeyClient();\n         keyServer = channel.keyServer;\n         masterPrivateKeyClient = channel.masterPrivateKeyClient;\n         masterPrivateKeyServer = channel.masterPrivateKeyServer;\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 71,
                        "snippet": {"text": "public Sha256Hash anchorTxHash;\n"},
                        "endColumn": 35,
                        "startColumn": 4,
                        "startLine": 71,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/layer/high/Channel.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _Channel.java_, class: _Channel_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: Channel.java, class: Channel has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/processor/implementations/management/ChannelBlockchainWatcher.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/processor/implementations/management/ChannelBlockchainWatcher.java\n@@ -37,7 +37,7 @@\n     @Override\n     public void start () {\n \n-        Transaction tx = blockchainHelper.getTransaction(channel.anchorTxHash);\n+        Transaction tx = blockchainHelper.getTransaction(channel.getAnchorTxHash());\n         if (tx != null) {\n             int depth = tx.getConfidence().getDepthInBlocks();\n             if (depth > 0) {\n@@ -52,7 +52,7 @@\n                 if (stopped) {\n                     return true;\n                 } else {\n-                    return channel.anchorTxHash.equals(tx.getHash());\n+                    return channel.getAnchorTxHash().equals(tx.getHash());\n                 }\n             }\n \n@@ -73,7 +73,7 @@\n                     return true;\n                 }\n                 for (TransactionInput input : tx.getInputs()) {\n-                    if (input.getOutpoint().getHash().equals(channel.anchorTxHash)) {\n+                    if (input.getOutpoint().getHash().equals(channel.getAnchorTxHash())) {\n                         return true;\n                     }\n                 }\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 73,
                        "snippet": {"text": "public int minConfirmationAnchor;\n"},
                        "endColumn": 37,
                        "startColumn": 4,
                        "startLine": 73,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/layer/high/Channel.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _Channel.java_, class: _Channel_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: Channel.java, class: Channel has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/high/channel/establish/messages/LNEstablishAMessage.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/high/channel/establish/messages/LNEstablishAMessage.java\n@@ -66,7 +66,7 @@\n             channel.channelStatus.revoHashClientNext = revocationHashNext;\n             channel.channelStatus.csvDelay = csvDelay;\n             channel.channelStatus.feePerByte = feePerByte;\n-            channel.minConfirmationAnchor = minConfirmationAnchor;\n+            channel.setMinConfirmationAnchor(minConfirmationAnchor);\n             channel.shaChainDepthCurrent = 0;\n             return channel;\n         } catch (Exception e) {\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 47,
                        "snippet": {"text": "public ECKey keyServer;\n"},
                        "endColumn": 27,
                        "startColumn": 4,
                        "startLine": 47,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/layer/high/Channel.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _Channel.java_, class: _Channel_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: Channel.java, class: Channel has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/high/channel/establish/messages/LNEstablishMessageFactoryImpl.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/high/channel/establish/messages/LNEstablishMessageFactoryImpl.java\n@@ -10,7 +10,7 @@\n     @Override\n     public LNEstablishAMessage getEstablishMessageA (Channel channel) {\n         LNEstablishAMessage message = new LNEstablishAMessage(\n-                channel.keyServer,\n+                channel.getKeyServer(),\n                 channel.anchorTx,\n                 channel.channelStatus.revoHashServerCurrent,\n                 channel.channelStatus.revoHashServerNext,\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 14,
                        "snippet": {"text": "public float feePerByte;\n"},
                        "endColumn": 28,
                        "startColumn": 4,
                        "startLine": 14,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/layer/high/channel/close/messages/LNCloseAMessage.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _LNCloseAMessage.java_, class: _LNCloseAMessage_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: LNCloseAMessage.java, class: LNCloseAMessage has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/high/channel/close/messages/LNCloseAMessage.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/high/channel/close/messages/LNCloseAMessage.java\n@@ -11,7 +11,7 @@\n public class LNCloseAMessage implements LNClose {\n     public byte[] channelHash;\n     public List<byte[]> signatureList;\n-    public float feePerByte;\n+    private float feePerByte;\n \n     public LNCloseAMessage (Sha256Hash channelHash, Collection<TransactionSignature> signatureList, float feePerByte) {\n         this.channelHash = channelHash.getBytes();\n@@ -28,4 +28,8 @@\n         Preconditions.checkNotNull(signatureList);\n         Preconditions.checkArgument(signatureList.size() > 0);\n     }\n+\n+\tpublic float getFeePerByte() {\n+\t\treturn feePerByte;\n+\t}\n }\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 12,
                        "snippet": {"text": "public Channel channel;\n"},
                        "endColumn": 27,
                        "startColumn": 4,
                        "startLine": 12,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/layer/high/channel/establish/EstablishProgress.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _EstablishProgress.java_, class: _EstablishProgress_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: EstablishProgress.java, class: EstablishProgress has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/high/channel/establish/EstablishProgress.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/high/channel/establish/EstablishProgress.java\n@@ -9,9 +9,17 @@\n public class EstablishProgress {\n     boolean weStartedExchange = false;\n     List<LNEstablish> messages = new ArrayList<>();\n-    public Channel channel;\n+    private Channel channel;\n \n     public long countMessage (Class c) {\n         return messages.stream().filter(o -> o.getClass() == c).count();\n     }\n+\n+\tpublic Channel getChannel() {\n+\t\treturn channel;\n+\t}\n+\n+\tpublic void setChannel(Channel channel) {\n+\t\tthis.channel = channel;\n+\t}\n }\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 100,
                        "snippet": {"text": "getMessageNumber(decryptedMessage)"},
                        "endColumn": 58,
                        "startColumn": 24,
                        "startLine": 100,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/layer/low/encryption/EncryptionProcessorImpl.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "CRR-1",
                "message": {
                    "markdown": "In file: method: _EncryptionProcessorImpl.java_, there is a method _processMessageToBeDecrypted_ that returns one or more error return value(s) that have not been checked properly. iCR suggested that the checks be done properly. To learn more about the consequences of unchecked return value, read [CWE-252](https://cwe.mitre.org/data/definitions/252.html).",
                    "text": "In file: EncryptionProcessorImpl.java, there is a method processMessageToBeDecrypted that returns one or more error return value(s) that have not been checked properly. iCR suggested that the checks be done properly. To learn more about the consequences of unchecked return value, read CWE-252."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/low/encryption/EncryptionProcessorImpl.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/low/encryption/EncryptionProcessorImpl.java\n@@ -96,8 +96,12 @@\n                     System.out.println(\"I: \" + getClientName() + \" \" + decryptedMessage);\n                 }\n             } else {\n-                System.out.println(\"I: \" +\n-                        getMessageNumber(decryptedMessage) + \" \" +\n+                long getMessageNumberResult = getMessageNumber(decryptedMessage);\n+\t\t\t\t// OR Warning: Handle Error Code\n+\t\t\t\tif (getMessageNumberResult == -1) {\n+\t\t\t\t}\n+\t\t\t\tSystem.out.println(\"I: \" +\n+                        getMessageNumberResult + \" \" +\n                         getAckedMessageNumber(decryptedMessage) + \" \" +\n                         getClientName() + \" \" +\n                         decryptedMessage + \"[\" + (message.payload.length / 1024) + \"]\");\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 149,
                        "snippet": {"text": "getMessageNumber(decryptedMessage)"},
                        "endColumn": 50,
                        "startColumn": 16,
                        "startLine": 149,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/layer/low/encryption/EncryptionProcessorImpl.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "CRR-1",
                "message": {
                    "markdown": "In file: method: _EncryptionProcessorImpl.java_, there is a method _logIncomingMessage_ that returns one or more error return value(s) that have not been checked properly. iCR suggested that the checks be done properly. To learn more about the consequences of unchecked return value, read [CWE-252](https://cwe.mitre.org/data/definitions/252.html).",
                    "text": "In file: EncryptionProcessorImpl.java, there is a method logIncomingMessage that returns one or more error return value(s) that have not been checked properly. iCR suggested that the checks be done properly. To learn more about the consequences of unchecked return value, read CWE-252."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/low/encryption/EncryptionProcessorImpl.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/low/encryption/EncryptionProcessorImpl.java\n@@ -96,8 +96,12 @@\n                     System.out.println(\"I: \" + getClientName() + \" \" + decryptedMessage);\n                 }\n             } else {\n-                System.out.println(\"I: \" +\n-                        getMessageNumber(decryptedMessage) + \" \" +\n+                long getMessageNumberResult = getMessageNumber(decryptedMessage);\n+\t\t\t\t// OR Warning: Handle Error Code\n+\t\t\t\tif (getMessageNumberResult == -1) {\n+\t\t\t\t}\n+\t\t\t\tSystem.out.println(\"I: \" +\n+                        getMessageNumberResult + \" \" +\n                         getAckedMessageNumber(decryptedMessage) + \" \" +\n                         getClientName() + \" \" +\n                         decryptedMessage + \"[\" + (message.payload.length / 1024) + \"]\");\n@@ -133,9 +137,13 @@\n                     System.out.println(\"O: \" + getClientName() + \" \" + message + \"[\" + (encryptedMessage.payload.length / 1024) + \"]\");\n                 }\n             } else {\n-                System.out.println(\"O: \" +\n+                long getMessageNumberResult = getMessageNumber(message);\n+\t\t\t\t// OR Warning: Handle Error Code\n+\t\t\t\tif (getMessageNumberResult == -1) {\n+\t\t\t\t}\n+\t\t\t\tSystem.out.println(\"O: \" +\n                         System.currentTimeMillis() + \" \" +\n-                        getMessageNumber(message) + \" \" +\n+                        getMessageNumberResult + \" \" +\n                         getAckedMessageNumber(message) + \" \" +\n                         getClientName() + \" \" +\n                         message + \"[\" + (encryptedMessage.payload.length / 1024) + \"]\");\n@@ -145,8 +153,12 @@\n     }\n \n     private void logIncomingMessage(Message decryptedMessage, EncryptedMessage message) {\n-        System.out.println(\"I: \" +\n-                getMessageNumber(decryptedMessage) + \" \" +\n+        long getMessageNumberResult = getMessageNumber(decryptedMessage);\n+\t\t// OR Warning: Handle Error Code\n+\t\tif (getMessageNumberResult == -1) {\n+\t\t}\n+\t\tSystem.out.println(\"I: \" +\n+                getMessageNumberResult + \" \" +\n                 getAckedMessageNumber(decryptedMessage) + \" \" +\n                 getClientName() + \" \" +\n                 decryptedMessage + \"[\" + (message.payload.length / 1024) + \"]\");\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 138,
                        "snippet": {"text": "getMessageNumber(message)"},
                        "endColumn": 49,
                        "startColumn": 24,
                        "startLine": 138,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/layer/low/encryption/EncryptionProcessorImpl.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "CRR-1",
                "message": {
                    "markdown": "In file: method: _EncryptionProcessorImpl.java_, there is a method _processMessageToBeEncrypted_ that returns one or more error return value(s) that have not been checked properly. iCR suggested that the checks be done properly. To learn more about the consequences of unchecked return value, read [CWE-252](https://cwe.mitre.org/data/definitions/252.html).",
                    "text": "In file: EncryptionProcessorImpl.java, there is a method processMessageToBeEncrypted that returns one or more error return value(s) that have not been checked properly. iCR suggested that the checks be done properly. To learn more about the consequences of unchecked return value, read CWE-252."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/low/encryption/EncryptionProcessorImpl.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/low/encryption/EncryptionProcessorImpl.java\n@@ -96,8 +96,12 @@\n                     System.out.println(\"I: \" + getClientName() + \" \" + decryptedMessage);\n                 }\n             } else {\n-                System.out.println(\"I: \" +\n-                        getMessageNumber(decryptedMessage) + \" \" +\n+                long getMessageNumberResult = getMessageNumber(decryptedMessage);\n+\t\t\t\t// OR Warning: Handle Error Code\n+\t\t\t\tif (getMessageNumberResult == -1) {\n+\t\t\t\t}\n+\t\t\t\tSystem.out.println(\"I: \" +\n+                        getMessageNumberResult + \" \" +\n                         getAckedMessageNumber(decryptedMessage) + \" \" +\n                         getClientName() + \" \" +\n                         decryptedMessage + \"[\" + (message.payload.length / 1024) + \"]\");\n@@ -133,9 +137,13 @@\n                     System.out.println(\"O: \" + getClientName() + \" \" + message + \"[\" + (encryptedMessage.payload.length / 1024) + \"]\");\n                 }\n             } else {\n-                System.out.println(\"O: \" +\n+                long getMessageNumberResult = getMessageNumber(message);\n+\t\t\t\t// OR Warning: Handle Error Code\n+\t\t\t\tif (getMessageNumberResult == -1) {\n+\t\t\t\t}\n+\t\t\t\tSystem.out.println(\"O: \" +\n                         System.currentTimeMillis() + \" \" +\n-                        getMessageNumber(message) + \" \" +\n+                        getMessageNumberResult + \" \" +\n                         getAckedMessageNumber(message) + \" \" +\n                         getClientName() + \" \" +\n                         message + \"[\" + (encryptedMessage.payload.length / 1024) + \"]\");\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 92,
                        "snippet": {"text": "synchronized (observerList) {\n  for (  NodeObserver observer : observerList) {\n    List<ByteBuffer> objectList=dataObjectMap.get(observer);\n    if (objectList.size() > GossipProcessor.OBJECT_AMOUNT_TO_SEND) {\n      observer.update(new ArrayList<>(objectList));\n      objectList.clear();\n    }\n  }\n}\n"},
                        "endColumn": 9,
                        "startColumn": 8,
                        "startLine": 84,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/layer/middle/broadcasting/gossip/GossipSubjectImpl.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "CUS-2",
                "message": {
                    "markdown": "In file: method: _GossipSubjectImpl.java_, method: _broadcast_, there is a synchronized block on an improper field. iCR suggested the block to be synchronized on a private and final field. To learn more check [CWE-412](https://cwe.mitre.org/data/definitions/412) and [CERT Secure coding standard LCK00-J](https://wiki.sei.cmu.edu/confluence/display/java/LCK00-J.+Use+private+final+lock+objects+to+synchronize+classes+that+may+interact+with+untrusted+code).",
                    "text": "In file: GossipSubjectImpl.java, method: broadcast, there is a synchronized block on an improper field. iCR suggested the block to be synchronized on a private and final field. To learn more check CWE-412 and CERT Secure coding standard LCK00-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/middle/broadcasting/gossip/GossipSubjectImpl.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/middle/broadcasting/gossip/GossipSubjectImpl.java\n@@ -81,7 +81,11 @@\n     }\n \n     private void broadcast () {\n-        synchronized (observerList) {\n+        \n+\t\t/* ********OpenRefactory Warning********\n+\t\t Synchronization should be on a private final field\n+\t\t*/\n+\t\tsynchronized (observerList) {\n             for (NodeObserver observer : observerList) {\n                 List<ByteBuffer> objectList = dataObjectMap.get(observer);\n                 if (objectList.size() > GossipProcessor.OBJECT_AMOUNT_TO_SEND) {\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 106,
                        "snippet": {"text": "synchronized (observerList) {\n  for (  NodeObserver nodeObserver1 : observerList) {\n    if (nodeObserver == null || nodeObserver != nodeObserver1) {\n      List<ByteBuffer> bufferList=dataObjectMap.get(nodeObserver1);\n      ByteBuffer buffer=ByteBuffer.wrap(dataObject.getHash());\n      if (!bufferList.contains(buffer)) {\n        bufferList.add(buffer);\n      }\n    }\n  }\n}\n"},
                        "endColumn": 9,
                        "startColumn": 8,
                        "startLine": 96,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/layer/middle/broadcasting/gossip/GossipSubjectImpl.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "CUS-2",
                "message": {
                    "markdown": "In file: method: _GossipSubjectImpl.java_, method: _addNewDataObjectToMap_, there is a synchronized block on an improper field. iCR suggested the block to be synchronized on a private and final field. To learn more check [CWE-412](https://cwe.mitre.org/data/definitions/412) and [CERT Secure coding standard LCK00-J](https://wiki.sei.cmu.edu/confluence/display/java/LCK00-J.+Use+private+final+lock+objects+to+synchronize+classes+that+may+interact+with+untrusted+code).",
                    "text": "In file: GossipSubjectImpl.java, method: addNewDataObjectToMap, there is a synchronized block on an improper field. iCR suggested the block to be synchronized on a private and final field. To learn more check CWE-412 and CERT Secure coding standard LCK00-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/middle/broadcasting/gossip/GossipSubjectImpl.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/middle/broadcasting/gossip/GossipSubjectImpl.java\n@@ -93,7 +93,11 @@\n     }\n \n     private void addNewDataObjectToMap (NodeObserver nodeObserver, P2PDataObject dataObject) {\n-        synchronized (observerList) {\n+        \n+\t\t/* ********OpenRefactory Warning********\n+\t\t Synchronization should be on a private final field\n+\t\t*/\n+\t\tsynchronized (observerList) {\n             for (NodeObserver nodeObserver1 : observerList) {\n                 if (nodeObserver == null || nodeObserver != nodeObserver1) {\n                     List<ByteBuffer> bufferList = dataObjectMap.get(nodeObserver1);\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 38,
                        "snippet": {"text": "synchronized (observerList) {\n  observerList.remove(observer);\n  dataObjectMap.remove(observer);\n}\n"},
                        "endColumn": 9,
                        "startColumn": 8,
                        "startLine": 35,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/layer/middle/broadcasting/gossip/GossipSubjectImpl.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "CUS-2",
                "message": {
                    "markdown": "In file: method: _GossipSubjectImpl.java_, method: _removeObserver_, there is a synchronized block on an improper field. iCR suggested the block to be synchronized on a private and final field. To learn more check [CWE-412](https://cwe.mitre.org/data/definitions/412) and [CERT Secure coding standard LCK00-J](https://wiki.sei.cmu.edu/confluence/display/java/LCK00-J.+Use+private+final+lock+objects+to+synchronize+classes+that+may+interact+with+untrusted+code).",
                    "text": "In file: GossipSubjectImpl.java, method: removeObserver, there is a synchronized block on an improper field. iCR suggested the block to be synchronized on a private and final field. To learn more check CWE-412 and CERT Secure coding standard LCK00-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/middle/broadcasting/gossip/GossipSubjectImpl.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/middle/broadcasting/gossip/GossipSubjectImpl.java\n@@ -32,7 +32,11 @@\n \n     @Override\n     public void removeObserver (NodeObserver observer) {\n-        synchronized (observerList) {\n+        \n+\t\t/* ********OpenRefactory Warning********\n+\t\t Synchronization should be on a private final field\n+\t\t*/\n+\t\tsynchronized (observerList) {\n             observerList.remove(observer);\n             dataObjectMap.remove(observer);\n         }\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 30,
                        "snippet": {"text": "synchronized (observerList) {\n  observerList.add(observer);\n  dataObjectMap.put(observer,new ArrayList<>());\n}\n"},
                        "endColumn": 9,
                        "startColumn": 8,
                        "startLine": 27,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/layer/middle/broadcasting/gossip/GossipSubjectImpl.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "CUS-2",
                "message": {
                    "markdown": "In file: method: _GossipSubjectImpl.java_, method: _registerObserver_, there is a synchronized block on an improper field. iCR suggested the block to be synchronized on a private and final field. To learn more check [CWE-412](https://cwe.mitre.org/data/definitions/412) and [CERT Secure coding standard LCK00-J](https://wiki.sei.cmu.edu/confluence/display/java/LCK00-J.+Use+private+final+lock+objects+to+synchronize+classes+that+may+interact+with+untrusted+code).",
                    "text": "In file: GossipSubjectImpl.java, method: registerObserver, there is a synchronized block on an improper field. iCR suggested the block to be synchronized on a private and final field. To learn more check CWE-412 and CERT Secure coding standard LCK00-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/middle/broadcasting/gossip/GossipSubjectImpl.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/middle/broadcasting/gossip/GossipSubjectImpl.java\n@@ -24,7 +24,11 @@\n \n     @Override\n     public void registerObserver (NodeObserver observer) {\n-        synchronized (observerList) {\n+        \n+\t\t/* ********OpenRefactory Warning********\n+\t\t Synchronization should be on a private final field\n+\t\t*/\n+\t\tsynchronized (observerList) {\n             observerList.add(observer);\n             dataObjectMap.put(observer, new ArrayList<>());\n         }\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 131,
                        "snippet": {"text": "serverObject.hostServer.equals(\"\")"},
                        "endColumn": 81,
                        "startColumn": 47,
                        "startLine": 131,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/layer/middle/broadcasting/gossip/GossipProcessorImpl.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "ESC-1",
                "message": {
                    "markdown": "In file: method: _GossipProcessorImpl.java_, there is a method _sendOwnIPAddress_ that checks if a _String_ is empty using _equals_ method. It is better to do the emptiness check using [String.equals](https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/String.html#equals(java.lang.Object)) method as it has less overhead than [String.isEmpty](https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/String.html#isEmpty()) method. iCR fixed the issue by using the _String.isEmpty()_ method.",
                    "text": "In file: GossipProcessorImpl.java, there is a method sendOwnIPAddress that checks if a {String} is empty using {equals} method. It is better to do the emptiness check using String.equals method as it has less overhead than String.isEmpty method. iCR fixed the issue by using the {String.isEmpty()} method."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/middle/broadcasting/gossip/GossipProcessorImpl.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/middle/broadcasting/gossip/GossipProcessorImpl.java\n@@ -128,7 +128,7 @@\n     }\n \n     private void sendOwnIPAddress () {\n-        if (serverObject.hostServer == null || serverObject.hostServer.equals(\"\")) {\n+        if (serverObject.hostServer == null || serverObject.hostServer.isEmpty()) {\n             return;\n         }\n         PubkeyIPObject pubkeyIPObject = new PubkeyIPObject();\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 56,
                        "snippet": {"text": "synchronized (syncClientList) {\n  syncClientList.remove(syncClient);\n}\n"},
                        "endColumn": 9,
                        "startColumn": 8,
                        "startLine": 54,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/layer/middle/broadcasting/sync/SynchronizationHelper.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "CUS-2",
                "message": {
                    "markdown": "In file: method: _SynchronizationHelper.java_, method: _removeSyncClient_, there is a synchronized block on an improper field. iCR suggested the block to be synchronized on a private and final field. To learn more check [CWE-412](https://cwe.mitre.org/data/definitions/412) and [CERT Secure coding standard LCK00-J](https://wiki.sei.cmu.edu/confluence/display/java/LCK00-J.+Use+private+final+lock+objects+to+synchronize+classes+that+may+interact+with+untrusted+code).",
                    "text": "In file: SynchronizationHelper.java, method: removeSyncClient, there is a synchronized block on an improper field. iCR suggested the block to be synchronized on a private and final field. To learn more check CWE-412 and CERT Secure coding standard LCK00-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/middle/broadcasting/sync/SynchronizationHelper.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/middle/broadcasting/sync/SynchronizationHelper.java\n@@ -51,7 +51,11 @@\n     }\n \n     public void removeSyncClient (SyncClient syncClient) {\n-        synchronized (syncClientList) {\n+        \n+\t\t/* ********OpenRefactory Warning********\n+\t\t Synchronization should be on a private final field\n+\t\t*/\n+\t\tsynchronized (syncClientList) {\n             syncClientList.remove(syncClient);\n         }\n     }\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 50,
                        "snippet": {"text": "synchronized (syncClientList) {\n  syncClientList.add(syncClient);\n}\n"},
                        "endColumn": 9,
                        "startColumn": 8,
                        "startLine": 48,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/layer/middle/broadcasting/sync/SynchronizationHelper.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "CUS-2",
                "message": {
                    "markdown": "In file: method: _SynchronizationHelper.java_, method: _addSyncClient_, there is a synchronized block on an improper field. iCR suggested the block to be synchronized on a private and final field. To learn more check [CWE-412](https://cwe.mitre.org/data/definitions/412) and [CERT Secure coding standard LCK00-J](https://wiki.sei.cmu.edu/confluence/display/java/LCK00-J.+Use+private+final+lock+objects+to+synchronize+classes+that+may+interact+with+untrusted+code).",
                    "text": "In file: SynchronizationHelper.java, method: addSyncClient, there is a synchronized block on an improper field. iCR suggested the block to be synchronized on a private and final field. To learn more check CWE-412 and CERT Secure coding standard LCK00-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/middle/broadcasting/sync/SynchronizationHelper.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/middle/broadcasting/sync/SynchronizationHelper.java\n@@ -45,7 +45,11 @@\n     }\n \n     public void addSyncClient (SyncClient syncClient) {\n-        synchronized (syncClientList) {\n+        \n+\t\t/* ********OpenRefactory Warning********\n+\t\t Synchronization should be on a private final field\n+\t\t*/\n+\t\tsynchronized (syncClientList) {\n             syncClientList.add(syncClient);\n         }\n     }\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 120,
                        "snippet": {"text": "synchronized (syncClientList) {\n  for (  SyncClient syncClient : syncClientList) {\n    Integer currentSegment=currentlySyncing.get(syncClient);\n    if (currentSegment != null) {\n      Boolean segmentSynced=fragmentIsSyncedList.get(currentSegment);\n      if (segmentSynced == null || segmentSynced == Boolean.FALSE) {\n        long time=System.currentTimeMillis() - fragmentJobList.get(currentSegment);\n        if (time < TIME_TO_SYNC_ONE_FRAGMENT) {\n          continue;\n        }\n      }\n    }\n    int nextFragment=getNextFragmentIndexToSynchronize();\n    if (nextFragment == 0) {\n      continue;\n    }\n    counter++;\n    currentlySyncing.put(syncClient,nextFragment);\n    syncClient.syncSegment(nextFragment);\n  }\n}\n"},
                        "endColumn": 13,
                        "startColumn": 12,
                        "startLine": 100,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/layer/middle/broadcasting/sync/SynchronizationHelper.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "CUS-2",
                "message": {
                    "markdown": "In file: method: _SynchronizationHelper.java_, method: _sync_, there is a synchronized block on an improper field. iCR suggested the block to be synchronized on a private and final field. To learn more check [CWE-412](https://cwe.mitre.org/data/definitions/412) and [CERT Secure coding standard LCK00-J](https://wiki.sei.cmu.edu/confluence/display/java/LCK00-J.+Use+private+final+lock+objects+to+synchronize+classes+that+may+interact+with+untrusted+code).",
                    "text": "In file: SynchronizationHelper.java, method: sync, there is a synchronized block on an improper field. iCR suggested the block to be synchronized on a private and final field. To learn more check CWE-412 and CERT Secure coding standard LCK00-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/middle/broadcasting/sync/SynchronizationHelper.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/middle/broadcasting/sync/SynchronizationHelper.java\n@@ -97,7 +97,10 @@\n         int counter = 0;\n         while (!fullySynchronized()) {\n             Thread.sleep(100);\n-            synchronized (syncClientList) {\n+            /* ********OpenRefactory Warning********\n+\t\t\t Synchronization should be on a private final field\n+\t\t\t*/\n+\t\t\tsynchronized (syncClientList) {\n                 for (SyncClient syncClient : syncClientList) {\n                     Integer currentSegment = currentlySyncing.get(syncClient);\n                     if (currentSegment != null) {\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 20,
                        "snippet": {"text": "public int timestamp;\n"},
                        "endColumn": 25,
                        "startColumn": 4,
                        "startLine": 20,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/layer/middle/broadcasting/types/PubkeyChannelObject.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _PubkeyChannelObject.java_, class: _PubkeyChannelObject_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: PubkeyChannelObject.java, class: PubkeyChannelObject has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/middle/broadcasting/types/PubkeyChannelObject.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/middle/broadcasting/types/PubkeyChannelObject.java\n@@ -17,7 +17,7 @@\n     public byte[] signatureA;\n     public byte[] signatureB;\n \n-    public int timestamp;\n+    private int timestamp;\n \n     public PubkeyChannelObject () {\n     }\n@@ -142,4 +142,8 @@\n         result = 31 * result + timestamp;\n         return result;\n     }\n+\n+\tpublic void setTimestamp(int timestamp) {\n+\t\tthis.timestamp = timestamp;\n+\t}\n }\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 23,
                        "snippet": {"text": "public int timestamp;\n"},
                        "endColumn": 25,
                        "startColumn": 4,
                        "startLine": 23,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/layer/middle/broadcasting/types/ChannelStatusObject.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _ChannelStatusObject.java_, class: _ChannelStatusObject_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: ChannelStatusObject.java, class: ChannelStatusObject has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/database/hibernate/ChannelStatusObjectEntity.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/database/hibernate/ChannelStatusObjectEntity.java\n@@ -37,7 +37,7 @@\n         feeB = channelStatusObject.feeB;\n         signatureA = channelStatusObject.signatureA;\n         signatureB = channelStatusObject.signatureB;\n-        timestamp = channelStatusObject.timestamp;\n+        timestamp = channelStatusObject.getTimestamp();\n     }\n \n     public ChannelStatusObject toChannelStatusObject() {\n@@ -51,7 +51,7 @@\n         channelStatusObject.feeB = feeB;\n         channelStatusObject.signatureA = signatureA;\n         channelStatusObject.signatureB = signatureB;\n-        channelStatusObject.timestamp = timestamp;\n+        channelStatusObject.setTimestamp(timestamp);\n         return channelStatusObject;\n     }\n \n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 18,
                        "snippet": {"text": "public int feeB;\n"},
                        "endColumn": 20,
                        "startColumn": 4,
                        "startLine": 18,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/layer/middle/broadcasting/types/ChannelStatusObject.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _ChannelStatusObject.java_, class: _ChannelStatusObject_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: ChannelStatusObject.java, class: ChannelStatusObject has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/database/hibernate/ChannelStatusObjectEntity.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/database/hibernate/ChannelStatusObjectEntity.java\n@@ -34,7 +34,7 @@\n         infoB = channelStatusObject.infoB;\n         latency = channelStatusObject.latency;\n         feeA = channelStatusObject.feeA;\n-        feeB = channelStatusObject.feeB;\n+        feeB = channelStatusObject.getFeeB();\n         signatureA = channelStatusObject.signatureA;\n         signatureB = channelStatusObject.signatureB;\n         timestamp = channelStatusObject.timestamp;\n@@ -48,7 +48,7 @@\n         channelStatusObject.infoB = infoB;\n         channelStatusObject.latency = latency;\n         channelStatusObject.feeA = feeA;\n-        channelStatusObject.feeB = feeB;\n+        channelStatusObject.setFeeB(feeB);\n         channelStatusObject.signatureA = signatureA;\n         channelStatusObject.signatureB = signatureB;\n         channelStatusObject.timestamp = timestamp;\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 16,
                        "snippet": {"text": "public int latency;\n"},
                        "endColumn": 23,
                        "startColumn": 4,
                        "startLine": 16,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/layer/middle/broadcasting/types/ChannelStatusObject.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _ChannelStatusObject.java_, class: _ChannelStatusObject_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: ChannelStatusObject.java, class: ChannelStatusObject has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/database/hibernate/ChannelStatusObjectEntity.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/database/hibernate/ChannelStatusObjectEntity.java\n@@ -32,7 +32,7 @@\n         pubkeyB = channelStatusObject.pubkeyB;\n         infoA = channelStatusObject.infoA;\n         infoB = channelStatusObject.infoB;\n-        latency = channelStatusObject.latency;\n+        latency = channelStatusObject.getLatency();\n         feeA = channelStatusObject.feeA;\n         feeB = channelStatusObject.feeB;\n         signatureA = channelStatusObject.signatureA;\n@@ -46,7 +46,7 @@\n         channelStatusObject.pubkeyB = pubkeyB;\n         channelStatusObject.infoA = infoA;\n         channelStatusObject.infoB = infoB;\n-        channelStatusObject.latency = latency;\n+        channelStatusObject.setLatency(latency);\n         channelStatusObject.feeA = feeA;\n         channelStatusObject.feeB = feeB;\n         channelStatusObject.signatureA = signatureA;\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 17,
                        "snippet": {"text": "public int feeA;\n"},
                        "endColumn": 20,
                        "startColumn": 4,
                        "startLine": 17,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/layer/middle/broadcasting/types/ChannelStatusObject.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _ChannelStatusObject.java_, class: _ChannelStatusObject_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: ChannelStatusObject.java, class: ChannelStatusObject has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/middle/broadcasting/types/ChannelStatusObject.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/middle/broadcasting/types/ChannelStatusObject.java\n@@ -14,7 +14,7 @@\n     public byte[] infoA;\n     public byte[] infoB;\n     public int latency;\n-    public int feeA;\n+    private int feeA;\n     public int feeB;\n \n     public byte[] signatureA;\n@@ -168,4 +168,12 @@\n         result = 31 * result + timestamp;\n         return result;\n     }\n+\n+\tpublic int getFeeA() {\n+\t\treturn feeA;\n+\t}\n+\n+\tpublic void setFeeA(int feeA) {\n+\t\tthis.feeA = feeA;\n+\t}\n }\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 16,
                        "snippet": {"text": "public String hostname;\n"},
                        "endColumn": 27,
                        "startColumn": 4,
                        "startLine": 16,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/layer/middle/broadcasting/types/PubkeyIPObject.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _PubkeyIPObject.java_, class: _PubkeyIPObject_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: PubkeyIPObject.java, class: PubkeyIPObject has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/middle/broadcasting/gossip/GossipProcessorImpl.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/middle/broadcasting/gossip/GossipProcessorImpl.java\n@@ -112,7 +112,7 @@\n         //TODO: Hack to show the other hostname in debugs\n         if (firstMessage && sendMessage.pubkeyIPList.size() > 0) {\n             node.port = sendMessage.pubkeyIPList.get(0).port;\n-            node.host = sendMessage.pubkeyIPList.get(0).hostname;\n+            node.host = sendMessage.pubkeyIPList.get(0).getHostname();\n             firstMessage = false;\n         }\n     }\n@@ -134,7 +134,7 @@\n         PubkeyIPObject pubkeyIPObject = new PubkeyIPObject();\n         pubkeyIPObject.pubkey = serverObject.pubKeyServer.getPubKey();\n         pubkeyIPObject.port = serverObject.portServer;\n-        pubkeyIPObject.hostname = serverObject.hostServer;\n+        pubkeyIPObject.setHostname(serverObject.hostServer);\n         pubkeyIPObject.timestamp = Tools.currentTime();\n         pubkeyIPObject.sign(serverObject.pubKeyServer);\n \n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 17,
                        "snippet": {"text": "public int port;\n"},
                        "endColumn": 20,
                        "startColumn": 4,
                        "startLine": 17,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/layer/middle/broadcasting/types/PubkeyIPObject.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _PubkeyIPObject.java_, class: _PubkeyIPObject_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: PubkeyIPObject.java, class: PubkeyIPObject has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/middle/broadcasting/types/PubkeyIPObject.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/middle/broadcasting/types/PubkeyIPObject.java\n@@ -14,7 +14,7 @@\n \n public class PubkeyIPObject extends P2PDataObject {\n     public String hostname;\n-    public int port;\n+    private int port;\n     public byte[] pubkey;\n     public byte[] signature;\n     public int timestamp;\n@@ -167,4 +167,12 @@\n                 \", timestamp=\" + timestamp +\n                 '}';\n     }\n+\n+\tpublic int getPort() {\n+\t\treturn port;\n+\t}\n+\n+\tpublic void setPort(int port) {\n+\t\tthis.port = port;\n+\t}\n }\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 20,
                        "snippet": {"text": "public int timestamp;\n"},
                        "endColumn": 25,
                        "startColumn": 4,
                        "startLine": 20,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/layer/middle/broadcasting/types/PubkeyIPObject.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _PubkeyIPObject.java_, class: _PubkeyIPObject_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: PubkeyIPObject.java, class: PubkeyIPObject has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/middle/broadcasting/types/PubkeyIPObject.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/middle/broadcasting/types/PubkeyIPObject.java\n@@ -17,7 +17,7 @@\n     public int port;\n     public byte[] pubkey;\n     public byte[] signature;\n-    public int timestamp;\n+    private int timestamp;\n \n     public PubkeyIPObject () {\n     }\n@@ -167,4 +167,8 @@\n                 \", timestamp=\" + timestamp +\n                 '}';\n     }\n+\n+\tpublic void setTimestamp(int timestamp) {\n+\t\tthis.timestamp = timestamp;\n+\t}\n }\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 222,
                        "snippet": {"text": "synchronized (totalList) {\n  Session session=sessionFactory.openSession();\n  Transaction tx=session.beginTransaction();\n  Iterator<P2PDataObject> iterator2=totalList.iterator();\n  while (iterator2.hasNext() && !deleted) {\n    P2PDataObject object2=iterator2.next();\n    if (object1.isSimilarObject(object2)) {\n      if (object1.getTimestamp() <= object2.getTimestamp()) {\n        iterator1.remove();\n      }\n else {\n        iterator2.remove();\n        for (int i=0; i < P2PDataObject.NUMBER_OF_FRAGMENTS + 1; i++) {\n          fragmentToListMap.get(i).remove(object2);\n        }\n        if (object2 instanceof PubkeyIPObject) {\n          session.createQuery(\"delete PubkeyIPObject \" + \"where hostname = :hostname and port = :port\").setParameter(\"hostname\",((PubkeyIPObject)object2).hostname).setParameter(\"port\",((PubkeyIPObject)object2).port).executeUpdate();\n        }\n        if (object2 instanceof PubkeyChannelObject) {\n          session.createQuery(\"delete PubkeyChannelObject \" + \"where (pubkeyA = :pubkeyA and pubkeyB = :pubkeyB) \" + \"or (pubkeyA = :pubkeyB and pubkeyB = :pubkeyA)\").setParameter(\"pubkeyA\",((PubkeyChannelObject)object2).pubkeyB).setParameter(\"pubkeyB\",((PubkeyChannelObject)object2).pubkeyB).executeUpdate();\n        }\n        if (object2 instanceof ChannelStatusObject) {\n          session.createQuery(\"delete ChannelStatusObject \" + \"where pubkeyA = :pubkeyA and pubkeyB = :pubkeyB\").setParameter(\"pubkeyA\",((ChannelStatusObject)object2).pubkeyA).setParameter(\"pubkeyB\",((ChannelStatusObject)object2).pubkeyB).executeUpdate();\n        }\n      }\n      deleted=true;\n    }\n  }\n  tx.commit();\n  session.close();\n}\n"},
                        "endColumn": 13,
                        "startColumn": 12,
                        "startLine": 173,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/database/HibernateHandler.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "CUS-2",
                "message": {
                    "markdown": "In file: method: _HibernateHandler.java_, method: _syncDatalist_, there is a synchronized block on an improper field. iCR suggested the block to be synchronized on a private and final field. To learn more check [CWE-412](https://cwe.mitre.org/data/definitions/412) and [CERT Secure coding standard LCK00-J](https://wiki.sei.cmu.edu/confluence/display/java/LCK00-J.+Use+private+final+lock+objects+to+synchronize+classes+that+may+interact+with+untrusted+code).",
                    "text": "In file: HibernateHandler.java, method: syncDatalist, there is a synchronized block on an improper field. iCR suggested the block to be synchronized on a private and final field. To learn more check CWE-412 and CERT Secure coding standard LCK00-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/database/HibernateHandler.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/database/HibernateHandler.java\n@@ -170,7 +170,10 @@\n                 continue;\n             }\n \n-            synchronized (totalList) {\n+            /* ********OpenRefactory Warning********\n+\t\t\t Synchronization should be on a private final field\n+\t\t\t*/\n+\t\t\tsynchronized (totalList) {\n                 Session session = sessionFactory.openSession();\n                 Transaction tx = session.beginTransaction();\n                 Iterator<P2PDataObject> iterator2 = totalList.iterator();\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 566,
                        "snippet": {"text": "synchronized (payments) {\n  for (  PaymentWrapper payment : payments) {\n    if (payment.statusSender == EMBEDDED && payment.statusReceiver == TO_BE_EMBEDDED) {\n      if (Tools.currentTime() - payment.paymentData.timestampOpen > Constants.PAYMENT_TIMEOUT) {\n        payment.statusReceiver=UNKNOWN;\n        payment.statusSender=TO_BE_REFUNDED;\n      }\n    }\n  }\n}\n"},
                        "endColumn": 9,
                        "startColumn": 8,
                        "startLine": 557,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/database/HibernateHandler.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "CUS-2",
                "message": {
                    "markdown": "In file: method: _HibernateHandler.java_, method: _checkPaymentsList_, there is a synchronized block on an improper field. iCR suggested the block to be synchronized on a private and final field. To learn more check [CWE-412](https://cwe.mitre.org/data/definitions/412) and [CERT Secure coding standard LCK00-J](https://wiki.sei.cmu.edu/confluence/display/java/LCK00-J.+Use+private+final+lock+objects+to+synchronize+classes+that+may+interact+with+untrusted+code).",
                    "text": "In file: HibernateHandler.java, method: checkPaymentsList, there is a synchronized block on an improper field. iCR suggested the block to be synchronized on a private and final field. To learn more check CWE-412 and CERT Secure coding standard LCK00-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/database/HibernateHandler.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/database/HibernateHandler.java\n@@ -554,7 +554,11 @@\n \n     @Override\n     public void checkPaymentsList () {\n-        synchronized (payments) {\n+        \n+\t\t/* ********OpenRefactory Warning********\n+\t\t Synchronization should be on a private final field\n+\t\t*/\n+\t\tsynchronized (payments) {\n             for (PaymentWrapper payment : payments) {\n                 if (payment.statusSender == EMBEDDED && payment.statusReceiver == TO_BE_EMBEDDED) {\n                     if (Tools.currentTime() - payment.paymentData.timestampOpen > Constants.PAYMENT_TIMEOUT) {\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 895,
                        "snippet": {"text": "synchronized (payments) {\n  Optional<PaymentWrapper> paymentWrapper=payments.stream().filter(p -> !isPaymentComplete(p)).filter(p -> Objects.equals(p.paymentData.secret,paymentSecret)).findAny();\n  if (paymentWrapper.isPresent()) {\n    return paymentWrapper.get();\n  }\n else {\n    return null;\n  }\n}\n"},
                        "endColumn": 9,
                        "startColumn": 8,
                        "startLine": 884,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/database/HibernateHandler.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "CUS-2",
                "message": {
                    "markdown": "In file: method: _HibernateHandler.java_, method: _getPayment_, there is a synchronized block on an improper field. iCR suggested the block to be synchronized on a private and final field. To learn more check [CWE-412](https://cwe.mitre.org/data/definitions/412) and [CERT Secure coding standard LCK00-J](https://wiki.sei.cmu.edu/confluence/display/java/LCK00-J.+Use+private+final+lock+objects+to+synchronize+classes+that+may+interact+with+untrusted+code).",
                    "text": "In file: HibernateHandler.java, method: getPayment, there is a synchronized block on an improper field. iCR suggested the block to be synchronized on a private and final field. To learn more check CWE-412 and CERT Secure coding standard LCK00-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/database/HibernateHandler.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/database/HibernateHandler.java\n@@ -881,7 +881,11 @@\n \n     @Override\n     public PaymentWrapper getPayment (PaymentSecret paymentSecret) {\n-        synchronized (payments) {\n+        \n+\t\t/* ********OpenRefactory Warning********\n+\t\t Synchronization should be on a private final field\n+\t\t*/\n+\t\tsynchronized (payments) {\n             Optional<PaymentWrapper> paymentWrapper = payments.stream()\n                     .filter(p -> !isPaymentComplete(p))\n                     .filter(p -> Objects.equals(p.paymentData.secret, paymentSecret))\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 580,
                        "snippet": {"text": "synchronized (payments) {\n  return getPaymentDatas(nodeKey,payments,false,TO_BE_EMBEDDED,CURRENTLY_EMBEDDING);\n}\n"},
                        "endColumn": 9,
                        "startColumn": 8,
                        "startLine": 578,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/database/HibernateHandler.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "CUS-2",
                "message": {
                    "markdown": "In file: method: _HibernateHandler.java_, method: _lockPaymentsToBeMade_, there is a synchronized block on an improper field. iCR suggested the block to be synchronized on a private and final field. To learn more check [CWE-412](https://cwe.mitre.org/data/definitions/412) and [CERT Secure coding standard LCK00-J](https://wiki.sei.cmu.edu/confluence/display/java/LCK00-J.+Use+private+final+lock+objects+to+synchronize+classes+that+may+interact+with+untrusted+code).",
                    "text": "In file: HibernateHandler.java, method: lockPaymentsToBeMade, there is a synchronized block on an improper field. iCR suggested the block to be synchronized on a private and final field. To learn more check CWE-412 and CERT Secure coding standard LCK00-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/database/HibernateHandler.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/database/HibernateHandler.java\n@@ -575,7 +575,11 @@\n \n     @Override\n     public List<PaymentData> lockPaymentsToBeMade (NodeKey nodeKey) {\n-        synchronized (payments) {\n+        \n+\t\t/* ********OpenRefactory Warning********\n+\t\t Synchronization should be on a private final field\n+\t\t*/\n+\t\tsynchronized (payments) {\n             return getPaymentDatas(nodeKey, payments, false, TO_BE_EMBEDDED, CURRENTLY_EMBEDDING);\n         }\n     }\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 587,
                        "snippet": {"text": "synchronized (payments) {\n  return getPaymentDatas(nodeKey,payments,true,TO_BE_REDEEMED,CURRENTLY_REDEEMING);\n}\n"},
                        "endColumn": 9,
                        "startColumn": 8,
                        "startLine": 585,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/database/HibernateHandler.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "CUS-2",
                "message": {
                    "markdown": "In file: method: _HibernateHandler.java_, method: _lockPaymentsToBeRedeemed_, there is a synchronized block on an improper field. iCR suggested the block to be synchronized on a private and final field. To learn more check [CWE-412](https://cwe.mitre.org/data/definitions/412) and [CERT Secure coding standard LCK00-J](https://wiki.sei.cmu.edu/confluence/display/java/LCK00-J.+Use+private+final+lock+objects+to+synchronize+classes+that+may+interact+with+untrusted+code).",
                    "text": "In file: HibernateHandler.java, method: lockPaymentsToBeRedeemed, there is a synchronized block on an improper field. iCR suggested the block to be synchronized on a private and final field. To learn more check CWE-412 and CERT Secure coding standard LCK00-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/database/HibernateHandler.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/database/HibernateHandler.java\n@@ -582,7 +582,11 @@\n \n     @Override\n     public List<PaymentData> lockPaymentsToBeRedeemed (NodeKey nodeKey) {\n-        synchronized (payments) {\n+        \n+\t\t/* ********OpenRefactory Warning********\n+\t\t Synchronization should be on a private final field\n+\t\t*/\n+\t\tsynchronized (payments) {\n             return getPaymentDatas(nodeKey, payments, true, TO_BE_REDEEMED, CURRENTLY_REDEEMING);\n         }\n     }\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 116,
                        "snippet": {"text": "synchronized (totalList) {\n  for (  P2PDataObject object : totalList) {\n    if (Arrays.equals(object.getHash(),hash)) {\n      return object;\n    }\n  }\n}\n"},
                        "endColumn": 9,
                        "startColumn": 8,
                        "startLine": 110,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/database/HibernateHandler.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "CUS-2",
                "message": {
                    "markdown": "In file: method: _HibernateHandler.java_, method: _getP2PDataObjectByHash_, there is a synchronized block on an improper field. iCR suggested the block to be synchronized on a private and final field. To learn more check [CWE-412](https://cwe.mitre.org/data/definitions/412) and [CERT Secure coding standard LCK00-J](https://wiki.sei.cmu.edu/confluence/display/java/LCK00-J.+Use+private+final+lock+objects+to+synchronize+classes+that+may+interact+with+untrusted+code).",
                    "text": "In file: HibernateHandler.java, method: getP2PDataObjectByHash, there is a synchronized block on an improper field. iCR suggested the block to be synchronized on a private and final field. To learn more check CWE-412 and CERT Secure coding standard LCK00-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/database/HibernateHandler.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/database/HibernateHandler.java\n@@ -107,7 +107,11 @@\n \n     @Override\n     public P2PDataObject getP2PDataObjectByHash (byte[] hash) {\n-        synchronized (totalList) {\n+        \n+\t\t/* ********OpenRefactory Warning********\n+\t\t Synchronization should be on a private final field\n+\t\t*/\n+\t\tsynchronized (totalList) {\n             for (P2PDataObject object : totalList) {\n                 if (Arrays.equals(object.getHash(), hash)) {\n                     return object;\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 334,
                        "snippet": {"text": "synchronized (totalList) {\n  if (!totalList.contains(obj)) {\n    totalList.add(obj);\n  }\n}\n"},
                        "endColumn": 13,
                        "startColumn": 12,
                        "startLine": 330,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/database/HibernateHandler.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "CUS-2",
                "message": {
                    "markdown": "In file: method: _HibernateHandler.java_, method: _syncDatalist_, there is a synchronized block on an improper field. iCR suggested the block to be synchronized on a private and final field. To learn more check [CWE-412](https://cwe.mitre.org/data/definitions/412) and [CERT Secure coding standard LCK00-J](https://wiki.sei.cmu.edu/confluence/display/java/LCK00-J.+Use+private+final+lock+objects+to+synchronize+classes+that+may+interact+with+untrusted+code).",
                    "text": "In file: HibernateHandler.java, method: syncDatalist, there is a synchronized block on an improper field. iCR suggested the block to be synchronized on a private and final field. To learn more check CWE-412 and CERT Secure coding standard LCK00-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/database/HibernateHandler.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/database/HibernateHandler.java\n@@ -327,7 +327,10 @@\n             if (!list.contains(obj)) {\n                 list.add(obj);\n             }\n-            synchronized (totalList) {\n+            /* ********OpenRefactory Warning********\n+\t\t\t Synchronization should be on a private final field\n+\t\t\t*/\n+\t\t\tsynchronized (totalList) {\n                 if (!totalList.contains(obj)) {\n                     totalList.add(obj);\n                 }\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 552,
                        "snippet": {"text": "synchronized (payments) {\n  if (update != null) {\n    for (    PaymentData payment : update.newPayments) {\n      PaymentWrapper paymentWrapper;\n      if (!payment.sending) {\n        paymentWrapper=new PaymentWrapper();\n        payments.add(paymentWrapper);\n        paymentWrapper.paymentData=payment;\n        paymentWrapper.sender=nodeKey;\n        paymentWrapper.statusSender=EMBEDDED;\n        PeeledOnion onion=null;\n        onion=onionHelper.loadMessage(keyServer,payment.onionObject);\n        if (secrets.contains(payment.secret)) {\n          paymentWrapper.paymentData.secret=getPaymentSecret(payment.secret);\n          paymentWrapper.statusSender=TO_BE_REDEEMED;\n        }\n else         if (onion.isLastHop) {\n          System.out.println(\"Don't have the payment secret - refund..\");\n          paymentWrapper.statusSender=TO_BE_REFUNDED;\n        }\n else {\n          NodeKey nextHop=onion.nextHop;\n          if (getOpenChannel(nextHop).size() > 0) {\n            paymentWrapper.statusReceiver=TO_BE_EMBEDDED;\n            paymentWrapper.receiver=nextHop;\n            payment.onionObject=onion.onionObject;\n          }\n else {\n            System.out.println(\"HibernateHandler.updateChannelStatus to be refunded?\");\n            paymentWrapper.statusSender=TO_BE_REFUNDED;\n          }\n        }\n      }\n else {\n        paymentWrapper=getPayment(payment.secret);\n        paymentWrapper.statusReceiver=EMBEDDED;\n      }\n    }\n    for (    PaymentData payment : update.redeemedPayments) {\n      addPaymentSecret(payment.secret);\n      PaymentWrapper paymentWrapper=getPayment(payment.secret);\n      if (paymentWrapper == null) {\n        throw new RuntimeException(\"Redeemed an unknown payment?\");\n      }\n      paymentWrapper.paymentData.secret=payment.secret;\n      if (Objects.equals(paymentWrapper.receiver,nodeKey)) {\n        paymentWrapper.statusReceiver=REDEEMED;\n        paymentWrapper.statusSender=TO_BE_REDEEMED;\n      }\n else       if (Objects.equals(paymentWrapper.sender,nodeKey)) {\n        paymentWrapper.statusSender=REDEEMED;\n      }\n else {\n        throw new RuntimeException(\"Neither of the parties involved in payment is the one who got here?\");\n      }\n    }\n    for (    PaymentData payment : update.refundedPayments) {\n      PaymentWrapper paymentWrapper=getPayment(payment.secret);\n      if (paymentWrapper == null) {\n        throw new RuntimeException(\"Refunded an unknown payment?\");\n      }\n      if (Objects.equals(paymentWrapper.receiver,nodeKey)) {\n        paymentWrapper.statusReceiver=REFUNDED;\n        paymentWrapper.statusSender=TO_BE_REFUNDED;\n      }\n else       if (Objects.equals(paymentWrapper.sender,nodeKey)) {\n        paymentWrapper.statusSender=REFUNDED;\n      }\n else {\n        throw new RuntimeException(\"Neither of the parties involved in payment is the one who got here?\");\n      }\n    }\n    unlockPayments(nodeKey,payments.stream().map(p -> p.paymentData).collect(Collectors.toList()));\n  }\n}\n"},
                        "endColumn": 9,
                        "startColumn": 8,
                        "startLine": 479,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/database/HibernateHandler.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "CUS-2",
                "message": {
                    "markdown": "In file: method: _HibernateHandler.java_, method: _updateChannelStatus_, there is a synchronized block on an improper field. iCR suggested the block to be synchronized on a private and final field. To learn more check [CWE-412](https://cwe.mitre.org/data/definitions/412) and [CERT Secure coding standard LCK00-J](https://wiki.sei.cmu.edu/confluence/display/java/LCK00-J.+Use+private+final+lock+objects+to+synchronize+classes+that+may+interact+with+untrusted+code).",
                    "text": "In file: HibernateHandler.java, method: updateChannelStatus, there is a synchronized block on an improper field. iCR suggested the block to be synchronized on a private and final field. To learn more check CWE-412 and CERT Secure coding standard LCK00-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/database/HibernateHandler.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/database/HibernateHandler.java\n@@ -476,7 +476,10 @@\n                 session.close();\n             }\n         }\n-        synchronized (payments) {\n+        /* ********OpenRefactory Warning********\n+\t\t Synchronization should be on a private final field\n+\t\t*/\n+\t\tsynchronized (payments) {\n             if (update != null) {\n                 for (PaymentData payment : update.newPayments) {\n                     PaymentWrapper paymentWrapper;\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 930,
                        "snippet": {"text": "synchronized (payments) {\n  for (  PaymentWrapper payment : payments) {\n    if (payment.paymentData.secret.equals(paymentSecret)) {\n      return payment.sender;\n    }\n  }\n  return null;\n}\n"},
                        "endColumn": 9,
                        "startColumn": 8,
                        "startLine": 923,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/database/HibernateHandler.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "CUS-2",
                "message": {
                    "markdown": "In file: method: _HibernateHandler.java_, method: _getSenderOfPayment_, there is a synchronized block on an improper field. iCR suggested the block to be synchronized on a private and final field. To learn more check [CWE-412](https://cwe.mitre.org/data/definitions/412) and [CERT Secure coding standard LCK00-J](https://wiki.sei.cmu.edu/confluence/display/java/LCK00-J.+Use+private+final+lock+objects+to+synchronize+classes+that+may+interact+with+untrusted+code).",
                    "text": "In file: HibernateHandler.java, method: getSenderOfPayment, there is a synchronized block on an improper field. iCR suggested the block to be synchronized on a private and final field. To learn more check CWE-412 and CERT Secure coding standard LCK00-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/database/HibernateHandler.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/database/HibernateHandler.java\n@@ -920,7 +920,11 @@\n \n     @Override\n     public NodeKey getSenderOfPayment (PaymentSecret paymentSecret) {\n-        synchronized (payments) {\n+        \n+\t\t/* ********OpenRefactory Warning********\n+\t\t Synchronization should be on a private final field\n+\t\t*/\n+\t\tsynchronized (payments) {\n             for (PaymentWrapper payment : payments) {\n                 if (payment.paymentData.secret.equals(paymentSecret)) {\n                     return payment.sender;\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 652,
                        "snippet": {"text": "synchronized (payments) {\n  payments.stream().filter(p -> Objects.equals(p.receiver,nodeKey)).filter(p -> paymentList.contains(p.paymentData)).forEach(p -> {\n    if (p.statusReceiver == CURRENTLY_EMBEDDING) {\n      p.statusReceiver=TO_BE_EMBEDDED;\n    }\n    if (p.statusReceiver == CURRENTLY_REDEEMING) {\n      p.statusReceiver=TO_BE_REDEEMED;\n    }\n    if (p.statusReceiver == CURRENTLY_REFUNDING) {\n      p.statusReceiver=TO_BE_REFUNDED;\n    }\n  }\n);\n  payments.stream().filter(p -> Objects.equals(p.sender,nodeKey)).filter(p -> paymentList.contains(p.paymentData)).forEach(p -> {\n    if (p.statusSender == CURRENTLY_EMBEDDING) {\n      p.statusSender=TO_BE_EMBEDDED;\n    }\n    if (p.statusSender == CURRENTLY_REDEEMING) {\n      p.statusSender=TO_BE_REDEEMED;\n    }\n    if (p.statusSender == CURRENTLY_REFUNDING) {\n      p.statusSender=TO_BE_REFUNDED;\n    }\n  }\n);\n}\n"},
                        "endColumn": 9,
                        "startColumn": 8,
                        "startLine": 621,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/database/HibernateHandler.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "CUS-2",
                "message": {
                    "markdown": "In file: method: _HibernateHandler.java_, method: _unlockPayments_, there is a synchronized block on an improper field. iCR suggested the block to be synchronized on a private and final field. To learn more check [CWE-412](https://cwe.mitre.org/data/definitions/412) and [CERT Secure coding standard LCK00-J](https://wiki.sei.cmu.edu/confluence/display/java/LCK00-J.+Use+private+final+lock+objects+to+synchronize+classes+that+may+interact+with+untrusted+code).",
                    "text": "In file: HibernateHandler.java, method: unlockPayments, there is a synchronized block on an improper field. iCR suggested the block to be synchronized on a private and final field. To learn more check CWE-412 and CERT Secure coding standard LCK00-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/database/HibernateHandler.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/database/HibernateHandler.java\n@@ -618,7 +618,11 @@\n \n     @Override\n     public void unlockPayments (NodeKey nodeKey, List<PaymentData> paymentList) {\n-        synchronized (payments) {\n+        \n+\t\t/* ********OpenRefactory Warning********\n+\t\t Synchronization should be on a private final field\n+\t\t*/\n+\t\tsynchronized (payments) {\n \n             payments.stream()\n                     .filter(p -> Objects.equals(p.receiver, nodeKey))\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 862,
                        "snippet": {"text": "synchronized (payments) {\n  payments.add(paymentWrapper);\n}\n"},
                        "endColumn": 9,
                        "startColumn": 8,
                        "startLine": 860,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/database/HibernateHandler.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "CUS-2",
                "message": {
                    "markdown": "In file: method: _HibernateHandler.java_, method: _addPayment_, there is a synchronized block on an improper field. iCR suggested the block to be synchronized on a private and final field. To learn more check [CWE-412](https://cwe.mitre.org/data/definitions/412) and [CERT Secure coding standard LCK00-J](https://wiki.sei.cmu.edu/confluence/display/java/LCK00-J.+Use+private+final+lock+objects+to+synchronize+classes+that+may+interact+with+untrusted+code).",
                    "text": "In file: HibernateHandler.java, method: addPayment, there is a synchronized block on an improper field. iCR suggested the block to be synchronized on a private and final field. To learn more check CWE-412 and CERT Secure coding standard LCK00-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/database/HibernateHandler.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/database/HibernateHandler.java\n@@ -857,7 +857,10 @@\n         paymentWrapper.receiver = nodeKey;\n         paymentWrapper.statusReceiver = TO_BE_EMBEDDED;\n         paymentWrapper.paymentData = paymentData;\n-        synchronized (payments) {\n+        /* ********OpenRefactory Warning********\n+\t\t Synchronization should be on a private final field\n+\t\t*/\n+\t\tsynchronized (payments) {\n             payments.add(paymentWrapper);\n         }\n     }\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 269,
                        "snippet": {"text": "synchronized (totalList) {\n  Session session=sessionFactory.openSession();\n  Transaction tx=session.beginTransaction();\n  Iterator<P2PDataObject> iterator2=totalList.iterator();\n  while (iterator2.hasNext()) {\n    P2PDataObject object2=iterator2.next();\n    int timestamp=object2.getTimestamp();\n    if (timestamp != 0 && Tools.currentTime() - timestamp > P2PDataObject.MAXIMUM_AGE_SYNC_DATA) {\n      iterator2.remove();\n      for (int i=0; i < P2PDataObject.NUMBER_OF_FRAGMENTS + 1; i++) {\n        fragmentToListMap.get(i).remove(object2);\n      }\n      if (object2 instanceof PubkeyIPObject) {\n        session.createQuery(\"delete PubkeyIPObject \" + \"where hostname = :hostname and port = :port\").setParameter(\"hostname\",((PubkeyIPObject)object2).hostname).setParameter(\"port\",((PubkeyIPObject)object2).port).executeUpdate();\n      }\n      if (object2 instanceof PubkeyChannelObject) {\n        session.createQuery(\"delete PubkeyChannelObject \" + \"where (pubkeyA = :pubkeyA and pubkeyB = :pubkeyB) \" + \"or (pubkeyA = :pubkeyB and pubkeyB = :pubkeyA)\").setParameter(\"pubkeyA\",((PubkeyChannelObject)object2).pubkeyA).setParameter(\"pubkeyB\",((PubkeyChannelObject)object2).pubkeyB).executeUpdate();\n      }\n      if (object2 instanceof ChannelStatusObject) {\n        session.createQuery(\"delete ChannelStatusObject \" + \"where pubkeyA = :pubkeyA and pubkeyB = :pubkeyB\").setParameter(\"pubkeyA\",((ChannelStatusObject)object2).pubkeyA).setParameter(\"pubkeyB\",((ChannelStatusObject)object2).pubkeyB).executeUpdate();\n      }\n    }\n  }\n  tx.commit();\n  session.close();\n}\n"},
                        "endColumn": 9,
                        "startColumn": 8,
                        "startLine": 225,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/database/HibernateHandler.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "CUS-2",
                "message": {
                    "markdown": "In file: method: _HibernateHandler.java_, method: _syncDatalist_, there is a synchronized block on an improper field. iCR suggested the block to be synchronized on a private and final field. To learn more check [CWE-412](https://cwe.mitre.org/data/definitions/412) and [CERT Secure coding standard LCK00-J](https://wiki.sei.cmu.edu/confluence/display/java/LCK00-J.+Use+private+final+lock+objects+to+synchronize+classes+that+may+interact+with+untrusted+code).",
                    "text": "In file: HibernateHandler.java, method: syncDatalist, there is a synchronized block on an improper field. iCR suggested the block to be synchronized on a private and final field. To learn more check CWE-412 and CERT Secure coding standard LCK00-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/database/HibernateHandler.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/database/HibernateHandler.java\n@@ -222,7 +222,10 @@\n             }\n         }\n \n-        synchronized (totalList) {\n+        /* ********OpenRefactory Warning********\n+\t\t Synchronization should be on a private final field\n+\t\t*/\n+\t\tsynchronized (totalList) {\n             Session session = sessionFactory.openSession();\n             Transaction tx = session.beginTransaction();\n             Iterator<P2PDataObject> iterator2 = totalList.iterator();\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 879,
                        "snippet": {"text": "synchronized (payments) {\n  for (  PaymentWrapper p : payments) {\n    if (p.equals(paymentWrapper)) {\n      p.paymentData=paymentWrapper.paymentData;\n      p.receiver=paymentWrapper.receiver;\n      p.sender=paymentWrapper.sender;\n      p.statusReceiver=paymentWrapper.statusReceiver;\n      p.statusSender=paymentWrapper.statusSender;\n      return;\n    }\n  }\n  payments.add(paymentWrapper);\n}\n"},
                        "endColumn": 9,
                        "startColumn": 8,
                        "startLine": 867,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/database/HibernateHandler.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "CUS-2",
                "message": {
                    "markdown": "In file: method: _HibernateHandler.java_, method: _updatePayment_, there is a synchronized block on an improper field. iCR suggested the block to be synchronized on a private and final field. To learn more check [CWE-412](https://cwe.mitre.org/data/definitions/412) and [CERT Secure coding standard LCK00-J](https://wiki.sei.cmu.edu/confluence/display/java/LCK00-J.+Use+private+final+lock+objects+to+synchronize+classes+that+may+interact+with+untrusted+code).",
                    "text": "In file: HibernateHandler.java, method: updatePayment, there is a synchronized block on an improper field. iCR suggested the block to be synchronized on a private and final field. To learn more check CWE-412 and CERT Secure coding standard LCK00-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/database/HibernateHandler.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/database/HibernateHandler.java\n@@ -864,7 +864,11 @@\n \n     @Override\n     public void updatePayment (PaymentWrapper paymentWrapper) {\n-        synchronized (payments) {\n+        \n+\t\t/* ********OpenRefactory Warning********\n+\t\t Synchronization should be on a private final field\n+\t\t*/\n+\t\tsynchronized (payments) {\n             for (PaymentWrapper p : payments) {\n                 if (p.equals(paymentWrapper)) {\n                     p.paymentData = paymentWrapper.paymentData;\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 573,
                        "snippet": {"text": "synchronized (payments) {\n  return getPaymentDatas(nodeKey,payments,true,TO_BE_REFUNDED,CURRENTLY_REFUNDING);\n}\n"},
                        "endColumn": 9,
                        "startColumn": 8,
                        "startLine": 571,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/database/HibernateHandler.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "CUS-2",
                "message": {
                    "markdown": "In file: method: _HibernateHandler.java_, method: _lockPaymentsToBeRefunded_, there is a synchronized block on an improper field. iCR suggested the block to be synchronized on a private and final field. To learn more check [CWE-412](https://cwe.mitre.org/data/definitions/412) and [CERT Secure coding standard LCK00-J](https://wiki.sei.cmu.edu/confluence/display/java/LCK00-J.+Use+private+final+lock+objects+to+synchronize+classes+that+may+interact+with+untrusted+code).",
                    "text": "In file: HibernateHandler.java, method: lockPaymentsToBeRefunded, there is a synchronized block on an improper field. iCR suggested the block to be synchronized on a private and final field. To learn more check CWE-412 and CERT Secure coding standard LCK00-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/database/HibernateHandler.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/database/HibernateHandler.java\n@@ -568,7 +568,11 @@\n \n     @Override\n     public List<PaymentData> lockPaymentsToBeRefunded (NodeKey nodeKey) {\n-        synchronized (payments) {\n+        \n+\t\t/* ********OpenRefactory Warning********\n+\t\t Synchronization should be on a private final field\n+\t\t*/\n+\t\tsynchronized (payments) {\n             return getPaymentDatas(nodeKey, payments, true, TO_BE_REFUNDED, CURRENTLY_REFUNDING);\n         }\n     }\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 156,
                        "snippet": {"text": "synchronized (totalList) {\n  Session session=sessionFactory.openSession();\n  Transaction tx=session.beginTransaction();\n  totalList.remove(ipObject);\n  if (ipObject instanceof PubkeyIPObject) {\n    session.createQuery(\"delete PubkeyIPObject \" + \"where hostname = :hostname and port = :port\").setParameter(\"hostname\",((PubkeyIPObject)ipObject).hostname).setParameter(\"port\",((PubkeyIPObject)ipObject).port).executeUpdate();\n  }\n  tx.commit();\n  session.close();\n}\n"},
                        "endColumn": 9,
                        "startColumn": 8,
                        "startLine": 141,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/database/HibernateHandler.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "CUS-2",
                "message": {
                    "markdown": "In file: method: _HibernateHandler.java_, method: _invalidateP2PObject_, there is a synchronized block on an improper field. iCR suggested the block to be synchronized on a private and final field. To learn more check [CWE-412](https://cwe.mitre.org/data/definitions/412) and [CERT Secure coding standard LCK00-J](https://wiki.sei.cmu.edu/confluence/display/java/LCK00-J.+Use+private+final+lock+objects+to+synchronize+classes+that+may+interact+with+untrusted+code).",
                    "text": "In file: HibernateHandler.java, method: invalidateP2PObject, there is a synchronized block on an improper field. iCR suggested the block to be synchronized on a private and final field. To learn more check CWE-412 and CERT Secure coding standard LCK00-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/database/HibernateHandler.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/database/HibernateHandler.java\n@@ -137,7 +137,11 @@\n \n     @Override\n     public void invalidateP2PObject (P2PDataObject ipObject) {\n-        //TODO with a real database, we rather want to invalidate them, rather then just deleting these..\n+        \n+\t\t/* ********OpenRefactory Warning********\n+\t\t Synchronization should be on a private final field\n+\t\t*/\n+\t\t//TODO with a real database, we rather want to invalidate them, rather then just deleting these..\n         synchronized (totalList) {\n             Session session = sessionFactory.openSession();\n             Transaction tx = session.beginTransaction();\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 830,
                        "snippet": {"text": "synchronized (totalList) {\n  for (  P2PDataObject object : totalList) {\n    if (object instanceof ChannelStatusObject) {\n      list.add((ChannelStatusObject)object);\n    }\n  }\n}\n"},
                        "endColumn": 9,
                        "startColumn": 8,
                        "startLine": 824,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/database/HibernateHandler.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "CUS-2",
                "message": {
                    "markdown": "In file: method: _HibernateHandler.java_, method: _getTopology_, there is a synchronized block on an improper field. iCR suggested the block to be synchronized on a private and final field. To learn more check [CWE-412](https://cwe.mitre.org/data/definitions/412) and [CERT Secure coding standard LCK00-J](https://wiki.sei.cmu.edu/confluence/display/java/LCK00-J.+Use+private+final+lock+objects+to+synchronize+classes+that+may+interact+with+untrusted+code).",
                    "text": "In file: HibernateHandler.java, method: getTopology, there is a synchronized block on an improper field. iCR suggested the block to be synchronized on a private and final field. To learn more check CWE-412 and CERT Secure coding standard LCK00-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/database/HibernateHandler.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/database/HibernateHandler.java\n@@ -821,7 +821,10 @@\n     @Override\n     public List<ChannelStatusObject> getTopology () {\n         List<ChannelStatusObject> list = new ArrayList<>();\n-        synchronized (totalList) {\n+        /* ********OpenRefactory Warning********\n+\t\t Synchronization should be on a private final field\n+\t\t*/\n+\t\tsynchronized (totalList) {\n             for (P2PDataObject object : totalList) {\n                 if (object instanceof ChannelStatusObject) {\n                     list.add((ChannelStatusObject) object);\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 10,
                        "snippet": {"text": "public int portServer;\n"},
                        "endColumn": 26,
                        "startColumn": 4,
                        "startLine": 10,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/etc/Configuration.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _Configuration.java_, class: _Configuration_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: Configuration.java, class: Configuration has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/etc/Configuration.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/etc/Configuration.java\n@@ -7,6 +7,12 @@\n     public String publicKey;\n     public String serverKey;\n     public String hostnameServer;\n-    public int portServer;\n+    private int portServer;\n     public Set<String> nodesToBuildChannelWith = new HashSet<>();\n+\tpublic int getPortServer() {\n+\t\treturn portServer;\n+\t}\n+\tpublic void setPortServer(int portServer) {\n+\t\tthis.portServer = portServer;\n+\t}\n }\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 9,
                        "snippet": {"text": "public String hostnameServer;\n"},
                        "endColumn": 33,
                        "startColumn": 4,
                        "startLine": 9,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/etc/Configuration.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _Configuration.java_, class: _Configuration_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: Configuration.java, class: Configuration has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/MainClient.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/MainClient.java\n@@ -45,7 +45,7 @@\n \n         ServerObject server = new ServerObject();\n         server.portServer = configuration.portServer;\n-        server.hostServer = configuration.hostnameServer;\n+        server.hostServer = configuration.getHostnameServer();\n //        server.pubKeyServer = ECKey.fromPrivate(Tools.hexStringToByteArray(configuration.serverKey));\n         server.pubKeyServer = new ECKey();\n \n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 8,
                        "snippet": {"text": "public String serverKey;\n"},
                        "endColumn": 28,
                        "startColumn": 4,
                        "startLine": 8,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/etc/Configuration.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _Configuration.java_, class: _Configuration_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: Configuration.java, class: Configuration has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/MainNode.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/MainNode.java\n@@ -53,7 +53,7 @@\n             //Use external hostname for now as a hack..\n             configuration.hostnameServer = getExternalIP();\n             ECKey key = new ECKey();\n-            configuration.serverKey = Tools.bytesToHex(key.getPrivKeyBytes());\n+            configuration.setServerKey(Tools.bytesToHex(key.getPrivKeyBytes()));\n             // TODO: Verify that the public key corresponds to the private key when loading config from file\n             configuration.publicKey = key.getPublicKeyAsHex();\n             newConfiguration = true;\n@@ -64,7 +64,7 @@\n         ServerObject server = new ServerObject();\n         server.portServer = configuration.portServer;\n         server.hostServer = configuration.hostnameServer;\n-        server.pubKeyServer = ECKey.fromPrivate(Tools.hexStringToByteArray(configuration.serverKey));\n+        server.pubKeyServer = ECKey.fromPrivate(Tools.hexStringToByteArray(configuration.getServerKey()));\n \n         //Currently we are only using an in-memory implementation of the DBHandler and a Wallet that is not holding real bitcoin\n         DBHandler dbHandler = new HibernateHandler();\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 7,
                        "snippet": {"text": "public String publicKey;\n"},
                        "endColumn": 28,
                        "startColumn": 4,
                        "startLine": 7,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/etc/Configuration.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _Configuration.java_, class: _Configuration_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: Configuration.java, class: Configuration has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/MainNode.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/MainNode.java\n@@ -55,7 +55,7 @@\n             ECKey key = new ECKey();\n             configuration.serverKey = Tools.bytesToHex(key.getPrivKeyBytes());\n             // TODO: Verify that the public key corresponds to the private key when loading config from file\n-            configuration.publicKey = key.getPublicKeyAsHex();\n+            configuration.setPublicKey(key.getPublicKeyAsHex());\n             newConfiguration = true;\n             askForHostname(configuration);\n         }\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 155,
                        "snippet": {"text": "synchronized (initialized) {\n  if (!initialized) {\n    try {\n      blockStore=new SPVBlockStore(Constants.getNetwork(),new File(\"blockheaders\"));\n    }\n catch (    Exception e) {\n      blockStore=new MemoryBlockStore(Constants.getNetwork());\n    }\n    try {\n      blockChain=new BlockChain(Constants.getNetwork(),blockStore);\n      peerGroup=new PeerGroup(Constants.getNetwork(),blockChain);\n      peerGroup.addPeerDiscovery(new DnsDiscovery(Constants.getNetwork()));\n      peerGroup.setDownloadTxDependencies(0);\n      peerGroup.setBloomFilteringEnabled(false);\n      peerGroup.setFastCatchupTimeSecs(System.currentTimeMillis() / 1000 - 7200);\n      peerGroup.start();\n      peerGroup.addPreMessageReceivedEventListener((      Peer peer,      Message m) -> {\n        if (m instanceof Block || m instanceof Transaction) {\n          if (processedMessages.add(m.getHash())) {\n            poolExecutor.submit(() -> {\n              if (m instanceof Block) {\n                Iterator<OnBlockCommand> iterator=blockListener.iterator();\n                while (iterator.hasNext()) {\n                  OnBlockCommand onBlockCommand=iterator.next();\n                  if (onBlockCommand.execute((Block)m)) {\n                    iterator.remove();\n                  }\n                }\n              }\n else {\n                Transaction transaction=(Transaction)m;\n                Iterator<OnTxCommand> iterator=txListener.iterator();\n                while (iterator.hasNext()) {\n                  OnTxCommand onTxCommand=iterator.next();\n                  if (onTxCommand.compare(transaction)) {\n                    onTxCommand.execute(transaction);\n                    iterator.remove();\n                  }\n                }\n              }\n            }\n);\n          }\n        }\n        return m;\n      }\n);\n      registerShutdownHook();\n      peerGroup.startBlockChainDownload(new DownloadProgressTracker());\n    }\n catch (    Exception e) {\n      throw new RuntimeException(e);\n    }\n    initialized=true;\n  }\n}\n"},
                        "endColumn": 9,
                        "startColumn": 8,
                        "startLine": 100,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/helper/blockchain/BlockchainHelperImpl.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "CUS-2",
                "message": {
                    "markdown": "In file: method: _BlockchainHelperImpl.java_, method: _init_, there is a synchronized block on an improper field. iCR suggested the block to be synchronized on a private and final field. To learn more check [CWE-412](https://cwe.mitre.org/data/definitions/412) and [CERT Secure coding standard LCK00-J](https://wiki.sei.cmu.edu/confluence/display/java/LCK00-J.+Use+private+final+lock+objects+to+synchronize+classes+that+may+interact+with+untrusted+code).",
                    "text": "In file: BlockchainHelperImpl.java, method: init, there is a synchronized block on an improper field. iCR suggested the block to be synchronized on a private and final field. To learn more check CWE-412 and CERT Secure coding standard LCK00-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/helper/blockchain/BlockchainHelperImpl.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/helper/blockchain/BlockchainHelperImpl.java\n@@ -97,7 +97,11 @@\n     }\n \n     public void init () {\n-        synchronized (initialized) {\n+        \n+\t\t/* ********OpenRefactory Warning********\n+\t\t Synchronization should be on a private final field\n+\t\t*/\n+\t\tsynchronized (initialized) {\n             if (!initialized) {\n                 try {\n                     blockStore = new SPVBlockStore(Constants.getNetwork(), new File(\"blockheaders\"));\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 4,
                        "snippet": {"text": "public Command onSuccess=NullCommand.get();\n"},
                        "endColumn": 49,
                        "startColumn": 4,
                        "startLine": 4,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/helper/callback/ConnectionListener.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _ConnectionListener.java_, class: _ConnectionListener_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: ConnectionListener.java, class: ConnectionListener has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/ConnectionManagerImpl.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/ConnectionManagerImpl.java\n@@ -87,7 +87,7 @@\n \n         ConnectionListener listener = connectionListenerMap.get(node);\n         if (listener != null) {\n-            listener.onSuccess.execute();\n+            listener.getOnSuccess().execute();\n             connectionListenerMap.remove(node);\n         }\n         currentlyConnecting.remove(node);\n@@ -109,7 +109,7 @@\n         if (connectedNodes.contains(node)) {\n             //Already connected\n             overrideIntentIfNecessary(node, intent);\n-            connectionListener.onSuccess.execute();\n+            connectionListener.getOnSuccess().execute();\n         } else if (currentlyConnecting.contains(node)) {\n             //TODO we are overwriting the old listener - not sure if rather multimap or normal map..\n             overrideIntentIfNecessary(node, intent);\n@@ -349,7 +349,7 @@\n \n                     ConnectionListener connectionListener = new ConnectionListener();\n                     connectionListener.onFailure = this::connectionFailed;\n-                    connectionListener.onSuccess = this::connectionEstablished;\n+                    connectionListener.setOnSuccess(this::connectionEstablished);\n \n                     currentlyConnecting++;\n                     connect(nodeKey, intent, connectionListener);\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 5,
                        "snippet": {"text": "public Command onFailure=NullCommand.get();\n"},
                        "endColumn": 49,
                        "startColumn": 4,
                        "startLine": 5,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/helper/callback/ConnectionListener.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _ConnectionListener.java_, class: _ConnectionListener_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: ConnectionListener.java, class: ConnectionListener has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/helper/callback/ConnectionListener.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/helper/callback/ConnectionListener.java\n@@ -2,7 +2,7 @@\n \n public class ConnectionListener {\n     public Command onSuccess = NullCommand.get();\n-    public Command onFailure = NullCommand.get();\n+    private Command onFailure = NullCommand.get();\n \n     public ConnectionListener setOnSuccess (Command onSuccess) {\n         this.onSuccess = onSuccess;\n@@ -13,4 +13,8 @@\n         this.onFailure = onFailure;\n         return this;\n     }\n+\n+\tpublic Command getOnFailure() {\n+\t\treturn onFailure;\n+\t}\n }\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 50,
                        "snippet": {"text": "public NotificationBarPane notificationBar;\n"},
                        "endColumn": 47,
                        "startColumn": 4,
                        "startLine": 50,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-clientgui/src/main/java/wallettemplate/Main.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _Main.java_, class: _Main_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: Main.java, class: Main has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-clientgui/src/main/java/wallettemplate/CreateChannelController.java\n+++ /workspace/source/thunder-clientgui/src/main/java/wallettemplate/CreateChannelController.java\n@@ -62,7 +62,7 @@\n \n     @FXML\n     void send (ActionEvent event) {\n-        Main.instance.notificationBar.pushItem(\"Open Channel..\", BitcoinUIModel.syncProgress);\n+        Main.instance.getNotificationBar().pushItem(\"Open Channel..\", BitcoinUIModel.syncProgress);\n \n         overlayUI.done();\n         try {\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 138,
                        "snippet": {"text": "public T controller;\n"},
                        "endColumn": 28,
                        "startColumn": 8,
                        "startLine": 138,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-clientgui/src/main/java/wallettemplate/Main.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _Main.java_, class: _OverlayUI_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: Main.java, class: OverlayUI has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-clientgui/src/main/java/wallettemplate/SendMoneyBlockchainController.java\n+++ /workspace/source/thunder-clientgui/src/main/java/wallettemplate/SendMoneyBlockchainController.java\n@@ -77,7 +77,7 @@\n         Main.OverlayUI<WalletPasswordController> pwd = Main.instance.overlayUI(\"wallet_password.fxml\");\n         final String addressStr = address.getText();\n         final String amountStr = amountEdit.getText();\n-        pwd.controller.aesKeyProperty().addListener((observable, old, cur) -> {\n+        pwd.getController().aesKeyProperty().addListener((observable, old, cur) -> {\n             // We only get here if the user found the right password. If they don't or they cancel, we end up back on\n             // the main UI screen. By now the send money screen is history so we must recreate it.\n             checkGuiThread();\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 49,
                        "snippet": {"text": "public MainController controller;\n"},
                        "endColumn": 37,
                        "startColumn": 4,
                        "startLine": 49,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-clientgui/src/main/java/wallettemplate/Main.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _Main.java_, class: _Main_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: Main.java, class: Main has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-clientgui/src/main/java/wallettemplate/Main.java\n+++ /workspace/source/thunder-clientgui/src/main/java/wallettemplate/Main.java\n@@ -46,7 +46,7 @@\n \n     private StackPane uiStack;\n     private Pane mainUI;\n-    public MainController controller;\n+    private MainController controller;\n     public NotificationBarPane notificationBar;\n     public Stage mainWindow;\n \n@@ -272,4 +272,8 @@\n \n         launch(args);\n     }\n+\n+\tpublic MainController getController() {\n+\t\treturn controller;\n+\t}\n }\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 40,
                        "snippet": {"text": "public StringProperty openChannelButtonText=new SimpleStringProperty();\n"},
                        "endColumn": 77,
                        "startColumn": 4,
                        "startLine": 40,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-clientgui/src/main/java/wallettemplate/utils/BitcoinUIModel.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _BitcoinUIModel.java_, class: _BitcoinUIModel_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: BitcoinUIModel.java, class: BitcoinUIModel has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-clientgui/src/main/java/wallettemplate/utils/BitcoinUIModel.java\n+++ /workspace/source/thunder-clientgui/src/main/java/wallettemplate/utils/BitcoinUIModel.java\n@@ -37,7 +37,7 @@\n     public ObservableList<Node> transactionsThunderOpen = FXCollections.observableArrayList();\n \n     public BooleanProperty sendReceiveButtonEnabled = new SimpleBooleanProperty(true);\n-    public StringProperty openChannelButtonText = new SimpleStringProperty();\n+    private StringProperty openChannelButtonText = new SimpleStringProperty();\n \n     private SimpleObjectProperty<Address> address = new SimpleObjectProperty<>();\n     public SimpleObjectProperty<Coin> balance = new SimpleObjectProperty<>(Coin.ZERO);\n@@ -184,4 +184,8 @@\n         return balance;\n     }\n \n+\tpublic StringProperty getOpenChannelButtonText() {\n+\t\treturn openChannelButtonText;\n+\t}\n+\n }\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 39,
                        "snippet": {"text": "public BooleanProperty sendReceiveButtonEnabled=new SimpleBooleanProperty(true);\n"},
                        "endColumn": 86,
                        "startColumn": 4,
                        "startLine": 39,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-clientgui/src/main/java/wallettemplate/utils/BitcoinUIModel.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _BitcoinUIModel.java_, class: _BitcoinUIModel_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: BitcoinUIModel.java, class: BitcoinUIModel has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-clientgui/src/main/java/wallettemplate/MainController.java\n+++ /workspace/source/thunder-clientgui/src/main/java/wallettemplate/MainController.java\n@@ -203,8 +203,8 @@\n \n         openChannel.textProperty().bind(model.openChannelButtonText);\n \n-        thunderReceiveMoneyBtn.disableProperty().bind(model.sendReceiveButtonEnabled);\n-        thunderSendMoneyOutBtn.disableProperty().bind(model.sendReceiveButtonEnabled);\n+        thunderReceiveMoneyBtn.disableProperty().bind(model.getSendReceiveButtonEnabled());\n+        thunderSendMoneyOutBtn.disableProperty().bind(model.getSendReceiveButtonEnabled());\n \n         nodesList.getSelectionModel().selectedItemProperty().addListener(new ChangeListener<PubkeyIPObject>() {\n             @Override\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 14,
                        "snippet": {"text": "public int feePerByte;\n"},
                        "endColumn": 26,
                        "startColumn": 4,
                        "startLine": 14,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/layer/high/payments/messages/ChannelUpdate.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _ChannelUpdate.java_, class: _ChannelUpdate_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: ChannelUpdate.java, class: ChannelUpdate has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/high/ChannelStatus.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/high/ChannelStatus.java\n@@ -120,7 +120,7 @@\n             }\n         }\n \n-        this.feePerByte = update.feePerByte;\n+        this.feePerByte = update.getFeePerByte();\n         this.csvDelay = update.csvDelay;\n     }\n \n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 15,
                        "snippet": {"text": "public int csvDelay;\n"},
                        "endColumn": 24,
                        "startColumn": 4,
                        "startLine": 15,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/layer/high/payments/messages/ChannelUpdate.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _ChannelUpdate.java_, class: _ChannelUpdate_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: ChannelUpdate.java, class: ChannelUpdate has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/high/ChannelStatus.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/high/ChannelStatus.java\n@@ -121,7 +121,7 @@\n         }\n \n         this.feePerByte = update.feePerByte;\n-        this.csvDelay = update.csvDelay;\n+        this.csvDelay = update.getCsvDelay();\n     }\n \n     public void applyNextRevoHash () {\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 27,
                        "snippet": {"text": "public boolean isLastHop;\n"},
                        "endColumn": 29,
                        "startColumn": 4,
                        "startLine": 27,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/layer/high/payments/messages/PeeledOnion.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _PeeledOnion.java_, class: _PeeledOnion_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: PeeledOnion.java, class: PeeledOnion has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/high/payments/messages/PeeledOnion.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/high/payments/messages/PeeledOnion.java\n@@ -24,11 +24,15 @@\n         }\n     }\n \n-    public boolean isLastHop;\n+    private boolean isLastHop;\n     public byte[] payload;\n \n     public NodeKey nextHop;\n     public long amount;\n \n     public OnionObject onionObject;\n+\n+\tpublic boolean getIsLastHop() {\n+\t\treturn isLastHop;\n+\t}\n }\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 33,
                        "snippet": {"text": "public OnionObject onionObject;\n"},
                        "endColumn": 35,
                        "startColumn": 4,
                        "startLine": 33,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/layer/high/payments/messages/PeeledOnion.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _PeeledOnion.java_, class: _PeeledOnion_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: PeeledOnion.java, class: PeeledOnion has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/high/payments/LNPaymentHelperImpl.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/high/payments/LNPaymentHelperImpl.java\n@@ -81,7 +81,7 @@\n             if (peeledOnion.isLastHop) {\n                 pingProcessor(sender);\n             } else {\n-                paymentData.onionObject = peeledOnion.onionObject;\n+                paymentData.onionObject = peeledOnion.getOnionObject();\n                 NodeKey receiver = peeledOnion.nextHop;\n                 if (!pingProcessor(receiver)) {\n                     if (dbHandler.getOpenChannel(receiver).size() == 0) {\n@@ -103,7 +103,7 @@\n     public void makePayment (PaymentData paymentData) {\n         try {\n             PeeledOnion peeledOnion = getPeeledOnion(paymentData);\n-            paymentData.onionObject = peeledOnion.onionObject;\n+            paymentData.onionObject = peeledOnion.getOnionObject();\n             NodeKey nextHop = peeledOnion.nextHop;\n \n             if (processorList.containsKey(nextHop)) {\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 30,
                        "snippet": {"text": "public NodeKey nextHop;\n"},
                        "endColumn": 27,
                        "startColumn": 4,
                        "startLine": 30,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/layer/high/payments/messages/PeeledOnion.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _PeeledOnion.java_, class: _PeeledOnion_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: PeeledOnion.java, class: PeeledOnion has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/high/payments/messages/PeeledOnion.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/high/payments/messages/PeeledOnion.java\n@@ -27,8 +27,12 @@\n     public boolean isLastHop;\n     public byte[] payload;\n \n-    public NodeKey nextHop;\n+    private NodeKey nextHop;\n     public long amount;\n \n     public OnionObject onionObject;\n+\n+\tpublic NodeKey getNextHop() {\n+\t\treturn nextHop;\n+\t}\n }\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 36,
                        "snippet": {"text": "public int index;\n"},
                        "endColumn": 21,
                        "startColumn": 4,
                        "startLine": 36,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/layer/high/RevocationHash.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _RevocationHash.java_, class: _RevocationHash_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: RevocationHash.java, class: RevocationHash has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/high/RevocationHash.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/high/RevocationHash.java\n@@ -33,7 +33,7 @@\n  * Even though it is in theory the same as a payment hash, we use a different class, to avoid confusion. (which would lead to a direct loss of funds..)\n  */\n public class RevocationHash {\n-    public int index;\n+    private int index;\n     public byte[] secret;\n     public byte[] secretHash;\n \n@@ -104,4 +104,8 @@\n     public int hashCode () {\n         return Arrays.hashCode(secretHash);\n     }\n+\n+\tpublic int getIndex() {\n+\t\treturn index;\n+\t}\n }\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 4,
                        "snippet": {"text": "public int fragmentIndex;\n"},
                        "endColumn": 29,
                        "startColumn": 4,
                        "startLine": 4,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/layer/middle/broadcasting/sync/messages/SyncGetMessage.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _SyncGetMessage.java_, class: _SyncGetMessage_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: SyncGetMessage.java, class: SyncGetMessage has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/middle/broadcasting/sync/SyncProcessorImpl.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/middle/broadcasting/sync/SyncProcessorImpl.java\n@@ -76,7 +76,7 @@\n \n     private void processSyncGetMessage (Message message) {\n         SyncGetMessage syncMessage = (SyncGetMessage) message;\n-        sendSyncData(syncMessage.fragmentIndex);\n+        sendSyncData(syncMessage.getFragmentIndex());\n     }\n \n     private void sendSyncData (int fragmentIndex) {\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 109,
                        "snippet": {"text": "LNEstablishProcessorImpl.MIN_CONFIRMATIONS"},
                        "endColumn": 75,
                        "startColumn": 33,
                        "startLine": 109,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/processor/implementations/management/ChannelBlockchainWatcher.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "AQS-1",
                "message": {
                    "markdown": "In file: method: _ChannelBlockchainWatcher.java_, class: _ChannelBlockchainWatcher_, the body of a method _start_ references a static variable but it does not use the class that contains the static variable as the qualifier. iCR suggested using the proper qualifier.",
                    "text": "In file: ChannelBlockchainWatcher.java, class: ChannelBlockchainWatcher, the body of a method start references a static variable but it does not use the class that contains the static variable as the qualifier. iCR suggested using the proper qualifier."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/processor/implementations/management/ChannelBlockchainWatcher.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/processor/implementations/management/ChannelBlockchainWatcher.java\n@@ -106,7 +106,7 @@\n                 blockSince++;\n             }\n \n-            if (confirmations >= LNEstablishProcessorImpl.MIN_CONFIRMATIONS) {\n+            if (confirmations >= LNEstablishProcessor.MIN_CONFIRMATIONS) {\n                 channelManager.onAnchorDone(channel);\n                 return true;\n             } else {\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 63,
                        "snippet": {"text": "LNEstablishProcessorImpl.MIN_CONFIRMATIONS"},
                        "endColumn": 69,
                        "startColumn": 27,
                        "startLine": 63,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/communication/processor/implementations/management/ChannelBlockchainWatcher.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "AQS-1",
                "message": {
                    "markdown": "In file: method: _ChannelBlockchainWatcher.java_, class: _ChannelBlockchainWatcher_, the body of a method _execute_ references a static variable but it does not use the class that contains the static variable as the qualifier. iCR suggested using the proper qualifier.",
                    "text": "In file: ChannelBlockchainWatcher.java, class: ChannelBlockchainWatcher, the body of a method execute references a static variable but it does not use the class that contains the static variable as the qualifier. iCR suggested using the proper qualifier."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/processor/implementations/management/ChannelBlockchainWatcher.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/processor/implementations/management/ChannelBlockchainWatcher.java\n@@ -60,7 +60,7 @@\n             public void execute (Transaction tx) {\n                 if (stopped) {\n                     return;\n-                } else if (LNEstablishProcessorImpl.MIN_CONFIRMATIONS == 0) {\n+                } else if (LNEstablishProcessor.MIN_CONFIRMATIONS == 0) {\n                     channelManager.onAnchorDone(channel);\n                 }\n             }\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 135,
                        "snippet": {"text": "/** \n * Println.\n * @param o the o\n */\nprivate void println(Object o){\n  if (logWriter != null) {\n    logWriter.println(o);\n  }\n}\n"},
                        "endColumn": 5,
                        "startColumn": 4,
                        "startLine": 126,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/database/ScriptRunner.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "FT-2",
                "message": {
                    "markdown": "In file: method: _ScriptRunner.java_, there is a method _println_ that is vulnerable to [Cross-Site Scripting (XSS) attack](https://en.wikipedia.org/wiki/Cross-site_scripting) that can compromise any cookies, session tokens and other sensitive informations used with the website and browser. iCR identified the Cross-site Scripting sink where data has flown without being validated properly. It suggested proper sanitization to prevent this XSS attack.",
                    "text": "In file: ScriptRunner.java, there is a method println that is vulnerable to Cross-Site Scripting (XSS) attack that can compromise any cookies, session tokens and other sensitive informations used with the website and browser. iCR identified the Cross-site Scripting sink where data has flown without being validated properly. It suggested proper sanitization to prevent this XSS attack."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/database/ScriptRunner.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/database/ScriptRunner.java\n@@ -130,7 +130,90 @@\n      */\n     private void println (Object o) {\n         if (logWriter != null) {\n-            logWriter.println(o);\n+            \n+\t\t\t/* ********OpenRefactory Warning********\n+\t\t\t Possible XSS Attack!\n+\t\t\tPath: \n+\t\t\t\tFile: ScriptRunner.java, Line: 189\n+\t\t\t\t\twhile ((line=lineReader.readLine()) != null) {\n+\t\t\t\t\t  if (command == null) {\n+\t\t\t\t\t    command=new StringBuffer();\n+\t\t\t\t\t  }\n+\t\t\t\t\t  String trimmedLine=line.trim();\n+\t\t\t\t\t  if (trimmedLine.startsWith(\"--\")) {\n+\t\t\t\t\t    println(trimmedLine);\n+\t\t\t\t\t  }\n+\t\t\t\t\t else   if (trimmedLine.length() < 1 || trimmedLine.startsWith(\"//\")) {\n+\t\t\t\t\t  }\n+\t\t\t\t\t else   if (trimmedLine.length() < 1 || trimmedLine.startsWith(\"--\")) {\n+\t\t\t\t\t  }\n+\t\t\t\t\t else   if (!fullLineDelimiter && trimmedLine.endsWith(getDelimiter()) || fullLineDelimiter && trimmedLine.equals(getDelimiter())) {\n+\t\t\t\t\t    command.append(line.substring(0,line.lastIndexOf(getDelimiter())));\n+\t\t\t\t\t    command.append(\" \");\n+\t\t\t\t\t    Statement statement=conn.createStatement();\n+\t\t\t\t\t    println(command);\n+\t\t\t\t\t    boolean hasResults=false;\n+\t\t\t\t\t    if (stopOnError) {\n+\t\t\t\t\t      hasResults=statement.execute(command.toString());\n+\t\t\t\t\t    }\n+\t\t\t\t\t else {\n+\t\t\t\t\t      try {\n+\t\t\t\t\t        statement.execute(command.toString());\n+\t\t\t\t\t      }\n+\t\t\t\t\t catch (      SQLException e) {\n+\t\t\t\t\t        e.fillInStackTrace();\n+\t\t\t\t\t        printlnError(\"Error executing: \" + command);\n+\t\t\t\t\t        printlnError(e);\n+\t\t\t\t\t      }\n+\t\t\t\t\t    }\n+\t\t\t\t\t    if (autoCommit && !conn.getAutoCommit()) {\n+\t\t\t\t\t      conn.commit();\n+\t\t\t\t\t    }\n+\t\t\t\t\t    ResultSet rs=statement.getResultSet();\n+\t\t\t\t\t    if (hasResults && rs != null) {\n+\t\t\t\t\t      ResultSetMetaData md=rs.getMetaData();\n+\t\t\t\t\t      int cols=md.getColumnCount();\n+\t\t\t\t\t      for (int i=0; i < cols; i++) {\n+\t\t\t\t\t        String name=md.getColumnLabel(i);\n+\t\t\t\t\t        print(name + \"\\t\");\n+\t\t\t\t\t      }\n+\t\t\t\t\t      println(\"\");\n+\t\t\t\t\t      while (rs.next()) {\n+\t\t\t\t\t        for (int i=0; i < cols; i++) {\n+\t\t\t\t\t          String value=rs.getString(i);\n+\t\t\t\t\t          print(value + \"\\t\");\n+\t\t\t\t\t        }\n+\t\t\t\t\t        println(\"\");\n+\t\t\t\t\t      }\n+\t\t\t\t\t    }\n+\t\t\t\t\t    command=null;\n+\t\t\t\t\t    try {\n+\t\t\t\t\t      statement.close();\n+\t\t\t\t\t    }\n+\t\t\t\t\t catch (    Exception e) {\n+\t\t\t\t\t    }\n+\t\t\t\t\t    Thread.yield();\n+\t\t\t\t\t  }\n+\t\t\t\t\t else {\n+\t\t\t\t\t    command.append(line);\n+\t\t\t\t\t    command.append(\" \");\n+\t\t\t\t\t  }\n+\t\t\t\t\t}\n+\t\t\t\t\tVariable line is assigned a tainted value from external source\n+\t\t\t\tFile: ScriptRunner.java, Line: 201\n+\t\t\t\t\tcommand.append(line.substring(0,line.lastIndexOf(getDelimiter())));\n+\t\t\t\t\tTainted information passed through method invocation\n+\t\t\t\tFile: ScriptRunner.java, Line: 202\n+\t\t\t\t\tcommand.append(\" \");\n+\t\t\t\t\tTainted information passed through method invocation\n+\t\t\t\tFile: ScriptRunner.java, Line: 205\n+\t\t\t\t\tprintln(command);\n+\t\t\t\t\tTainted information is passed through the method call via command to the formal param o of the method.\n+\t\t\t\tFile: ScriptRunner.java, Line: 133\n+\t\t\t\t\tlogWriter.println(o);\n+\t\t\t\t\tTainted information used in a sink.\n+\t\t\t*/\n+\t\t\tlogWriter.println(o);\n         }\n     }\n \n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 146,
                        "snippet": {"text": "/** \n * Println error.\n * @param o the o\n */\nprivate void printlnError(Object o){\n  if (errorLogWriter != null) {\n    errorLogWriter.println(o);\n  }\n}\n"},
                        "endColumn": 5,
                        "startColumn": 4,
                        "startLine": 137,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/database/ScriptRunner.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "FT-2",
                "message": {
                    "markdown": "In file: method: _ScriptRunner.java_, there is a method _printlnError_ that is vulnerable to [Cross-Site Scripting (XSS) attack](https://en.wikipedia.org/wiki/Cross-site_scripting) that can compromise any cookies, session tokens and other sensitive informations used with the website and browser. iCR identified the Cross-site Scripting sink where data has flown without being validated properly. It suggested proper sanitization to prevent this XSS attack.",
                    "text": "In file: ScriptRunner.java, there is a method printlnError that is vulnerable to Cross-Site Scripting (XSS) attack that can compromise any cookies, session tokens and other sensitive informations used with the website and browser. iCR identified the Cross-site Scripting sink where data has flown without being validated properly. It suggested proper sanitization to prevent this XSS attack."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/database/ScriptRunner.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/database/ScriptRunner.java\n@@ -141,7 +141,90 @@\n      */\n     private void printlnError (Object o) {\n         if (errorLogWriter != null) {\n-            errorLogWriter.println(o);\n+            \n+\t\t\t/* ********OpenRefactory Warning********\n+\t\t\t Possible XSS Attack!\n+\t\t\tPath: \n+\t\t\t\tFile: ScriptRunner.java, Line: 189\n+\t\t\t\t\twhile ((line=lineReader.readLine()) != null) {\n+\t\t\t\t\t  if (command == null) {\n+\t\t\t\t\t    command=new StringBuffer();\n+\t\t\t\t\t  }\n+\t\t\t\t\t  String trimmedLine=line.trim();\n+\t\t\t\t\t  if (trimmedLine.startsWith(\"--\")) {\n+\t\t\t\t\t    println(trimmedLine);\n+\t\t\t\t\t  }\n+\t\t\t\t\t else   if (trimmedLine.length() < 1 || trimmedLine.startsWith(\"//\")) {\n+\t\t\t\t\t  }\n+\t\t\t\t\t else   if (trimmedLine.length() < 1 || trimmedLine.startsWith(\"--\")) {\n+\t\t\t\t\t  }\n+\t\t\t\t\t else   if (!fullLineDelimiter && trimmedLine.endsWith(getDelimiter()) || fullLineDelimiter && trimmedLine.equals(getDelimiter())) {\n+\t\t\t\t\t    command.append(line.substring(0,line.lastIndexOf(getDelimiter())));\n+\t\t\t\t\t    command.append(\" \");\n+\t\t\t\t\t    Statement statement=conn.createStatement();\n+\t\t\t\t\t    println(command);\n+\t\t\t\t\t    boolean hasResults=false;\n+\t\t\t\t\t    if (stopOnError) {\n+\t\t\t\t\t      hasResults=statement.execute(command.toString());\n+\t\t\t\t\t    }\n+\t\t\t\t\t else {\n+\t\t\t\t\t      try {\n+\t\t\t\t\t        statement.execute(command.toString());\n+\t\t\t\t\t      }\n+\t\t\t\t\t catch (      SQLException e) {\n+\t\t\t\t\t        e.fillInStackTrace();\n+\t\t\t\t\t        printlnError(\"Error executing: \" + command);\n+\t\t\t\t\t        printlnError(e);\n+\t\t\t\t\t      }\n+\t\t\t\t\t    }\n+\t\t\t\t\t    if (autoCommit && !conn.getAutoCommit()) {\n+\t\t\t\t\t      conn.commit();\n+\t\t\t\t\t    }\n+\t\t\t\t\t    ResultSet rs=statement.getResultSet();\n+\t\t\t\t\t    if (hasResults && rs != null) {\n+\t\t\t\t\t      ResultSetMetaData md=rs.getMetaData();\n+\t\t\t\t\t      int cols=md.getColumnCount();\n+\t\t\t\t\t      for (int i=0; i < cols; i++) {\n+\t\t\t\t\t        String name=md.getColumnLabel(i);\n+\t\t\t\t\t        print(name + \"\\t\");\n+\t\t\t\t\t      }\n+\t\t\t\t\t      println(\"\");\n+\t\t\t\t\t      while (rs.next()) {\n+\t\t\t\t\t        for (int i=0; i < cols; i++) {\n+\t\t\t\t\t          String value=rs.getString(i);\n+\t\t\t\t\t          print(value + \"\\t\");\n+\t\t\t\t\t        }\n+\t\t\t\t\t        println(\"\");\n+\t\t\t\t\t      }\n+\t\t\t\t\t    }\n+\t\t\t\t\t    command=null;\n+\t\t\t\t\t    try {\n+\t\t\t\t\t      statement.close();\n+\t\t\t\t\t    }\n+\t\t\t\t\t catch (    Exception e) {\n+\t\t\t\t\t    }\n+\t\t\t\t\t    Thread.yield();\n+\t\t\t\t\t  }\n+\t\t\t\t\t else {\n+\t\t\t\t\t    command.append(line);\n+\t\t\t\t\t    command.append(\" \");\n+\t\t\t\t\t  }\n+\t\t\t\t\t}\n+\t\t\t\t\tVariable line is assigned a tainted value from external source\n+\t\t\t\tFile: ScriptRunner.java, Line: 201\n+\t\t\t\t\tcommand.append(line.substring(0,line.lastIndexOf(getDelimiter())));\n+\t\t\t\t\tTainted information passed through method invocation\n+\t\t\t\tFile: ScriptRunner.java, Line: 202\n+\t\t\t\t\tcommand.append(\" \");\n+\t\t\t\t\tTainted information passed through method invocation\n+\t\t\t\tFile: ScriptRunner.java, Line: 215\n+\t\t\t\t\tprintlnError(\"Error executing: \" + command);\n+\t\t\t\t\tTainted information is passed through the method call via \"Error executing: \" + command to the formal param o of the method.\n+\t\t\t\tFile: ScriptRunner.java, Line: 144\n+\t\t\t\t\terrorLogWriter.println(o);\n+\t\t\t\t\tTainted information used in a sink.\n+\t\t\t*/\n+\t\t\terrorLogWriter.println(o);\n         }\n     }\n \n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 11,
                        "snippet": {"text": "public PaymentData paymentData;\n"},
                        "endColumn": 35,
                        "startColumn": 4,
                        "startLine": 11,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/database/objects/PaymentWrapper.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _PaymentWrapper.java_, class: _PaymentWrapper_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: PaymentWrapper.java, class: PaymentWrapper has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/database/objects/PaymentWrapper.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/database/objects/PaymentWrapper.java\n@@ -8,7 +8,7 @@\n \n public class PaymentWrapper {\n \n-    public PaymentData paymentData;\n+    private PaymentData paymentData;\n \n     public PaymentStatus statusSender;\n     public PaymentStatus statusReceiver;\n@@ -58,4 +58,12 @@\n     public int hashCode () {\n         return paymentData != null ? paymentData.hashCode() : 0;\n     }\n+\n+\tpublic PaymentData getPaymentData() {\n+\t\treturn paymentData;\n+\t}\n+\n+\tpublic void setPaymentData(PaymentData paymentData) {\n+\t\tthis.paymentData = paymentData;\n+\t}\n }\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 16,
                        "snippet": {"text": "public NodeKey sender;\n"},
                        "endColumn": 26,
                        "startColumn": 4,
                        "startLine": 16,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/database/objects/PaymentWrapper.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _PaymentWrapper.java_, class: _PaymentWrapper_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: PaymentWrapper.java, class: PaymentWrapper has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/database/objects/PaymentWrapper.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/database/objects/PaymentWrapper.java\n@@ -13,7 +13,7 @@\n     public PaymentStatus statusSender;\n     public PaymentStatus statusReceiver;\n \n-    public NodeKey sender;\n+    private NodeKey sender;\n     public NodeKey receiver;\n \n     public PaymentWrapper () {\n@@ -58,4 +58,12 @@\n     public int hashCode () {\n         return paymentData != null ? paymentData.hashCode() : 0;\n     }\n+\n+\tpublic NodeKey getSender() {\n+\t\treturn sender;\n+\t}\n+\n+\tpublic void setSender(NodeKey sender) {\n+\t\tthis.sender = sender;\n+\t}\n }\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 17,
                        "snippet": {"text": "public NodeKey receiver;\n"},
                        "endColumn": 28,
                        "startColumn": 4,
                        "startLine": 17,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/database/objects/PaymentWrapper.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _PaymentWrapper.java_, class: _PaymentWrapper_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: PaymentWrapper.java, class: PaymentWrapper has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/database/objects/PaymentWrapper.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/database/objects/PaymentWrapper.java\n@@ -14,7 +14,7 @@\n     public PaymentStatus statusReceiver;\n \n     public NodeKey sender;\n-    public NodeKey receiver;\n+    private NodeKey receiver;\n \n     public PaymentWrapper () {\n \n@@ -58,4 +58,12 @@\n     public int hashCode () {\n         return paymentData != null ? paymentData.hashCode() : 0;\n     }\n+\n+\tpublic NodeKey getReceiver() {\n+\t\treturn receiver;\n+\t}\n+\n+\tpublic void setReceiver(NodeKey receiver) {\n+\t\tthis.receiver = receiver;\n+\t}\n }\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 57,
                        "snippet": {"text": "public static void setToTestValues(){\n  ClientObject node=new ClientObject();\n  node.init();\n  node.host=\"localhost\";\n  node.port=Constants.STANDARD_PORT;\n  PubkeyIPObject seed1=new PubkeyIPObject();\n  seed1.hostname=\"localhost\";\n  seed1.port=Constants.STANDARD_PORT;\n  seed1.pubkey=node.nodeKey.getPubKey();\n  ipList.clear();\n  nodeList.add(node);\n  ipList.add(seed1);\n}\n"},
                        "endColumn": 5,
                        "startColumn": 4,
                        "startLine": 42,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/etc/SeedNodes.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "FND-1",
                "message": {
                    "markdown": "In file: method: _SeedNodes.java_, class: _SeedNodes_, method: _setToTestValues_, there is a potential Null pointer dereference. This may throw an unexpected null pointer exception which, if unhandled, may crash the program. iCR detected the null pointer issue and demonstrated the full path from the object declaration to the null dereference in the object. A developer should introduce null checks in the appropriate path or initialize the object explicitly.",
                    "text": "In file: SeedNodes.java, class: SeedNodes, method: setToTestValues, there is a potential Null pointer dereference. This may throw an unexpected null pointer exception which, if unhandled, may crash the program. iCR detected the null pointer issue and demonstrated the full path from the object declaration to the null dereference in the object. A developer should introduce null checks in the appropriate path or initialize the object explicitly."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/etc/SeedNodes.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/etc/SeedNodes.java\n@@ -48,7 +48,14 @@\n         PubkeyIPObject seed1 = new PubkeyIPObject();\n         seed1.hostname = \"localhost\";\n         seed1.port = Constants.STANDARD_PORT;\n-        seed1.pubkey = node.nodeKey.getPubKey();\n+        /* ********OpenRefactory Warning********\n+\t\t Possible null pointer dereference!\n+\t\t Path: \n+\t\t\tFile: SeedNodes.java, Line: 51\n+\t\t\t\tseed1.pubkey=node.nodeKey.getPubKey();\n+\t\t\t\tnodeKey is referenced in method invocation.\n+\t\t*/\n+\t\tseed1.pubkey = node.nodeKey.getPubKey();\n \n         ipList.clear();\n \n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 8,
                        "snippet": {"text": "public long amount;\n"},
                        "endColumn": 23,
                        "startColumn": 4,
                        "startLine": 8,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/helper/PaymentRequest.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _PaymentRequest.java_, class: _PaymentRequest_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: PaymentRequest.java, class: PaymentRequest has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/helper/PaymentRequest.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/helper/PaymentRequest.java\n@@ -5,7 +5,7 @@\n import java.nio.ByteBuffer;\n \n public class PaymentRequest {\n-    public long amount;\n+    private long amount;\n     public PaymentSecret paymentSecret;\n     public byte[] pubkey;\n \n@@ -19,4 +19,8 @@\n \n         return buffer.array();\n     }\n+\n+\tpublic void setAmount(long amount) {\n+\t\tthis.amount = amount;\n+\t}\n }\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 9,
                        "snippet": {"text": "public PaymentSecret paymentSecret;\n"},
                        "endColumn": 39,
                        "startColumn": 4,
                        "startLine": 9,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/helper/PaymentRequest.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _PaymentRequest.java_, class: _PaymentRequest_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: PaymentRequest.java, class: PaymentRequest has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/helper/PaymentRequest.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/helper/PaymentRequest.java\n@@ -6,7 +6,7 @@\n \n public class PaymentRequest {\n     public long amount;\n-    public PaymentSecret paymentSecret;\n+    private PaymentSecret paymentSecret;\n     public byte[] pubkey;\n \n     public byte[] getPayload () {\n@@ -19,4 +19,12 @@\n \n         return buffer.array();\n     }\n+\n+\tpublic PaymentSecret getPaymentSecret() {\n+\t\treturn paymentSecret;\n+\t}\n+\n+\tpublic void setPaymentSecret(PaymentSecret paymentSecret) {\n+\t\tthis.paymentSecret = paymentSecret;\n+\t}\n }\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 9,
                        "snippet": {"text": "InventoryData"},
                        "endColumn": 26,
                        "startColumn": 13,
                        "startLine": 9,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/helper/blockchain/bciapi/InventoryData.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "CEH-1",
                "message": {
                    "markdown": "In file: method: _InventoryData.java_, there is a class _InventoryData_ that contains one of _equals_ and _hashCode_ implementation. This violates the contract mentioned in the specification for [CERT Secure coding standard MET09-J](https://wiki.sei.cmu.edu/confluence/display/java/MET09-J.+Classes+that+define+an+equals%28%29+method+must+also+define+a+hashCode%28%29+method) and can create subtle bugs. iCR suggested to override both _equals_ and _hashCode_ method. To learn more check [CWE-581](https://cwe.mitre.org/data/definitions/581) and [Object.hashCode](https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Object.html#hashCode()).",
                    "text": "In file: InventoryData.java, there is a class InventoryData that contains one of {equals} and {hashCode} implementation. This violates the contract mentioned in the specification for CERT Secure coding standard MET09-J and can create subtle bugs. iCR suggested to override both {equals} and {hashCode} method. To learn more check CWE-581 and Object.hashCode."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/helper/blockchain/bciapi/InventoryData.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/helper/blockchain/bciapi/InventoryData.java\n@@ -32,7 +32,13 @@\n                 .getAsString(), i.get(\"nconnected\").getAsInt(), i.get(\"relayed_count\").getAsInt(), i.get(\"relayed_percent\").getAsInt());\n     }\n \n-    @Override\n+    \n+\t/* ********OpenRefactory Warning********\n+\t The class 'InventoryData' only overrides 'equals' method.\n+\t iCR suggests that both 'equals' and 'hashCode' should be overridden.\n+\t*/\n+\n+\t@Override\n     public boolean equals (Object o) {\n         if (o == null) {\n             return false;\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 117,
                        "snippet": {"text": "private static String openURL(String resource,Map<String,String> params,String requestMethod) throws APIException, IOException {\n  String encodedParams=urlEncodeParams(params);\n  URL url=null;\n  APIException apiException=null;\n  IOException ioException=null;\n  String responseStr=null;\n  if (requestMethod.equals(\"GET\")) {\n    if (encodedParams.isEmpty()) {\n      url=new URL(BASE_URL + resource);\n    }\n else {\n      url=new URL(BASE_URL + resource + '?'+ encodedParams);\n    }\n  }\n else   if (requestMethod.equals(\"POST\")) {\n    url=new URL(BASE_URL + resource);\n  }\n  HttpURLConnection conn=null;\n  try {\n    conn=(HttpURLConnection)url.openConnection();\n    conn.setRequestMethod(requestMethod);\n    conn.setConnectTimeout(TIMEOUT_MS);\n    if (requestMethod.equals(\"POST\")) {\n      byte[] postBytes=encodedParams.getBytes(\"UTF-8\");\n      conn.setDoOutput(true);\n      conn.setRequestProperty(\"Content-Type\",\"application/x-www-form-urlencoded\");\n      conn.setRequestProperty(\"Content-Length\",String.valueOf(postBytes.length));\n      conn.getOutputStream().write(postBytes);\n      conn.getOutputStream().close();\n    }\n    if (conn.getResponseCode() != 200) {\n      apiException=new APIException(inputStreamToString(conn.getErrorStream()));\n    }\n else {\n      responseStr=inputStreamToString(conn.getInputStream());\n    }\n  }\n catch (  IOException e) {\n    ioException=e;\n  }\n finally {\n    try {\n      if (apiException != null) {\n        conn.getErrorStream().close();\n      }\n      conn.getInputStream().close();\n    }\n catch (    Exception ex) {\n    }\n    if (ioException != null) {\n      throw ioException;\n    }\n    if (apiException != null) {\n      throw apiException;\n    }\n  }\n  return responseStr;\n}\n"},
                        "endColumn": 5,
                        "startColumn": 4,
                        "startLine": 57,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/helper/blockchain/bciapi/HttpClient.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "FND-1",
                "message": {
                    "markdown": "In file: method: _HttpClient.java_, class: _HttpClient_, method: _openURL_, there is a potential Null pointer dereference. This may throw an unexpected null pointer exception which, if unhandled, may crash the program. iCR detected the null pointer issue and demonstrated the full path from the object declaration to the null dereference in the object. A developer should introduce null checks in the appropriate path or initialize the object explicitly.",
                    "text": "In file: HttpClient.java, class: HttpClient, method: openURL, there is a potential Null pointer dereference. This may throw an unexpected null pointer exception which, if unhandled, may crash the program. iCR detected the null pointer issue and demonstrated the full path from the object declaration to the null dereference in the object. A developer should introduce null checks in the appropriate path or initialize the object explicitly."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/helper/blockchain/bciapi/HttpClient.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/helper/blockchain/bciapi/HttpClient.java\n@@ -75,7 +75,27 @@\n         HttpURLConnection conn = null;\n \n         try {\n-            conn = (HttpURLConnection) url.openConnection();\n+            \n+\t\t\t/* ********OpenRefactory Warning********\n+\t\t\t Possible null pointer dereference!\n+\t\t\t Path: \n+\t\t\t\tFile: HttpClient.java, Line: 59\n+\t\t\t\t\tURL url=null;\n+\t\t\t\t\tVariable url is initialized null.\n+\t\t\t\tFile: HttpClient.java, Line: 67\n+\t\t\t\t\turl=new URL(BASE_URL + resource);\n+\t\t\t\t\tVariable url is allocated.\n+\t\t\t\tFile: HttpClient.java, Line: 69\n+\t\t\t\t\turl=new URL(BASE_URL + resource + '?'+ encodedParams);\n+\t\t\t\t\tVariable url is allocated.\n+\t\t\t\tFile: HttpClient.java, Line: 72\n+\t\t\t\t\turl=new URL(BASE_URL + resource);\n+\t\t\t\t\tVariable url is allocated.\n+\t\t\t\tFile: HttpClient.java, Line: 78\n+\t\t\t\t\tconn=(HttpURLConnection)url.openConnection();\n+\t\t\t\t\turl is referenced in method invocation.\n+\t\t\t*/\n+\t\t\tconn = (HttpURLConnection) url.openConnection();\n             conn.setRequestMethod(requestMethod);\n             conn.setConnectTimeout(TIMEOUT_MS);\n \n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 24,
                        "snippet": {"text": "address != \"\""},
                        "endColumn": 25,
                        "startColumn": 12,
                        "startLine": 24,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/helper/blockchain/bciapi/Output.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "FEC-2",
                "message": {
                    "markdown": "In file: method: _Output.java_, there is a logical expression over a _String_ data type which uses the hash code for checking reference equality. iCR suggested that an object equality check is appropriate in this case and introduced the object equality check. For more information, check [CWE-597](https://cwe.mitre.org/data/definitions/597.html).",
                    "text": "In file: Output.java, there is a logical expression over a {String} data type which uses the hash code for checking reference equality. iCR suggested that an object equality check is appropriate in this case and introduced the object equality check. For more information, check CWE-597."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/helper/blockchain/bciapi/Output.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/helper/blockchain/bciapi/Output.java\n@@ -21,7 +21,7 @@\n         this.txIndex = txIndex;\n         this.script = script;\n         this.spent = spent;\n-        if (address != \"\") {\n+        if (!(\"\".equals(address))) {\n             spentToAddress = true;\n         }\n     }\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 9,
                        "snippet": {"text": "InventoryData"},
                        "endColumn": 26,
                        "startColumn": 13,
                        "startLine": 9,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/helper/blockchain/bciapi/blockexplorer/InventoryData.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "CEH-1",
                "message": {
                    "markdown": "In file: method: _InventoryData.java_, there is a class _InventoryData_ that contains one of _equals_ and _hashCode_ implementation. This violates the contract mentioned in the specification for [CERT Secure coding standard MET09-J](https://wiki.sei.cmu.edu/confluence/display/java/MET09-J.+Classes+that+define+an+equals%28%29+method+must+also+define+a+hashCode%28%29+method) and can create subtle bugs. iCR suggested to override both _equals_ and _hashCode_ method. To learn more check [CWE-581](https://cwe.mitre.org/data/definitions/581) and [Object.hashCode](https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Object.html#hashCode()).",
                    "text": "In file: InventoryData.java, there is a class InventoryData that contains one of {equals} and {hashCode} implementation. This violates the contract mentioned in the specification for CERT Secure coding standard MET09-J and can create subtle bugs. iCR suggested to override both {equals} and {hashCode} method. To learn more check CWE-581 and Object.hashCode."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/helper/blockchain/bciapi/blockexplorer/InventoryData.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/helper/blockchain/bciapi/blockexplorer/InventoryData.java\n@@ -32,7 +32,13 @@\n                 .getAsString(), i.get(\"nconnected\").getAsInt(), i.get(\"relayed_count\").getAsInt(), i.get(\"relayed_percent\").getAsInt());\n     }\n \n-    @Override\n+    \n+\t/* ********OpenRefactory Warning********\n+\t The class 'InventoryData' only overrides 'equals' method.\n+\t iCR suggests that both 'equals' and 'hashCode' should be overridden.\n+\t*/\n+\n+\t@Override\n     public boolean equals (Object o) {\n         if (o == null) {\n             return false;\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 24,
                        "snippet": {"text": "address != \"\""},
                        "endColumn": 25,
                        "startColumn": 12,
                        "startLine": 24,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/helper/blockchain/bciapi/blockexplorer/Output.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "FEC-2",
                "message": {
                    "markdown": "In file: method: _Output.java_, there is a logical expression over a _String_ data type which uses the hash code for checking reference equality. iCR suggested that an object equality check is appropriate in this case and introduced the object equality check. For more information, check [CWE-597](https://cwe.mitre.org/data/definitions/597.html).",
                    "text": "In file: Output.java, there is a logical expression over a {String} data type which uses the hash code for checking reference equality. iCR suggested that an object equality check is appropriate in this case and introduced the object equality check. For more information, check CWE-597."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/helper/blockchain/bciapi/blockexplorer/Output.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/helper/blockchain/bciapi/blockexplorer/Output.java\n@@ -21,7 +21,7 @@\n         this.txIndex = txIndex;\n         this.script = script;\n         this.spent = spent;\n-        if (address != \"\") {\n+        if (!(\"\".equals(address))) {\n             spentToAddress = true;\n         }\n     }\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 6,
                        "snippet": {"text": "PaymentResponse"},
                        "endColumn": 28,
                        "startColumn": 13,
                        "startLine": 6,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/helper/blockchain/bciapi/wallet/PaymentResponse.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "CEH-1",
                "message": {
                    "markdown": "In file: method: _PaymentResponse.java_, there is a class _PaymentResponse_ that contains one of _equals_ and _hashCode_ implementation. This violates the contract mentioned in the specification for [CERT Secure coding standard MET09-J](https://wiki.sei.cmu.edu/confluence/display/java/MET09-J.+Classes+that+define+an+equals%28%29+method+must+also+define+a+hashCode%28%29+method) and can create subtle bugs. iCR suggested to override both _equals_ and _hashCode_ method. To learn more check [CWE-581](https://cwe.mitre.org/data/definitions/581) and [Object.hashCode](https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Object.html#hashCode()).",
                    "text": "In file: PaymentResponse.java, there is a class PaymentResponse that contains one of {equals} and {hashCode} implementation. This violates the contract mentioned in the specification for CERT Secure coding standard MET09-J and can create subtle bugs. iCR suggested to override both {equals} and {hashCode} method. To learn more check CWE-581 and Object.hashCode."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/helper/blockchain/bciapi/wallet/PaymentResponse.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/helper/blockchain/bciapi/wallet/PaymentResponse.java\n@@ -14,7 +14,13 @@\n         this.notice = notice;\n     }\n \n-    @Override\n+    \n+\t/* ********OpenRefactory Warning********\n+\t The class 'PaymentResponse' only overrides 'equals' method.\n+\t iCR suggests that both 'equals' and 'hashCode' should be overridden.\n+\t*/\n+\n+\t@Override\n     public boolean equals (Object o) {\n         if (o == null) {\n             return false;\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 47,
                        "snippet": {"text": "Mac.getInstance(\"HmacSHA1\")"},
                        "endColumn": 49,
                        "startColumn": 22,
                        "startLine": 47,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/helper/crypto/CryptoTools.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "USA-3",
                "message": {
                    "markdown": "In file: method: _CryptoTools.java_, there is a method _checkHMAC_ that uses a weak hashing algorithm. iCR suggested that a strong hashing algorithm should be used. See more information in [CWE-327](https://cwe.mitre.org/data/definitions/327.html), [CWE-328](https://cwe.mitre.org/data/definitions/328.html).",
                    "text": "In file: CryptoTools.java, there is a method checkHMAC that uses a weak hashing algorithm. iCR suggested that a strong hashing algorithm should be used. See more information in CWE-327, CWE-328."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/helper/crypto/CryptoTools.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/helper/crypto/CryptoTools.java\n@@ -44,7 +44,7 @@\n         try {\n \n             SecretKeySpec keySpec = new SecretKeySpec(keyBytes, \"HmacSHA1\");\n-            Mac mac = Mac.getInstance(\"HmacSHA1\");\n+            Mac mac = Mac.getInstance(\"HmacSHA256\");\n             mac.init(keySpec);\n             byte[] result = mac.doFinal(rest);\n \n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 35,
                        "snippet": {"text": "Mac.getInstance(\"HmacSHA1\")"},
                        "endColumn": 49,
                        "startColumn": 22,
                        "startLine": 35,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/helper/crypto/CryptoTools.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "USA-3",
                "message": {
                    "markdown": "In file: method: _CryptoTools.java_, there is a method _getHMAC_ that uses a weak hashing algorithm. iCR suggested that a strong hashing algorithm should be used. See more information in [CWE-327](https://cwe.mitre.org/data/definitions/327.html), [CWE-328](https://cwe.mitre.org/data/definitions/328.html).",
                    "text": "In file: CryptoTools.java, there is a method getHMAC that uses a weak hashing algorithm. iCR suggested that a strong hashing algorithm should be used. See more information in CWE-327, CWE-328."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/helper/crypto/CryptoTools.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/helper/crypto/CryptoTools.java\n@@ -32,7 +32,7 @@\n     public static byte[] getHMAC (byte[] data, byte[] keyBytes) {\n         try {\n             SecretKeySpec keySpec = new SecretKeySpec(keyBytes, \"HmacSHA1\");\n-            Mac mac = Mac.getInstance(\"HmacSHA1\");\n+            Mac mac = Mac.getInstance(\"HmacSHA256\");\n             mac.init(keySpec);\n             return mac.doFinal(data);\n         } catch (Exception e) {\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 21,
                        "snippet": {"text": "Mac.getInstance(\"HmacSHA1\")"},
                        "endColumn": 45,
                        "startColumn": 18,
                        "startLine": 21,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/helper/crypto/CryptoTools.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "USA-3",
                "message": {
                    "markdown": "In file: method: _CryptoTools.java_, there is a method _addHMAC_ that uses a weak hashing algorithm. iCR suggested that a strong hashing algorithm should be used. See more information in [CWE-327](https://cwe.mitre.org/data/definitions/327.html), [CWE-328](https://cwe.mitre.org/data/definitions/328.html).",
                    "text": "In file: CryptoTools.java, there is a method addHMAC that uses a weak hashing algorithm. iCR suggested that a strong hashing algorithm should be used. See more information in CWE-327, CWE-328."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/helper/crypto/CryptoTools.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/helper/crypto/CryptoTools.java\n@@ -18,7 +18,7 @@\n \n     public static byte[] addHMAC (byte[] data, byte[] keyBytes) throws NoSuchAlgorithmException, InvalidKeyException {\n         SecretKeySpec keySpec = new SecretKeySpec(keyBytes, \"HmacSHA1\");\n-        Mac mac = Mac.getInstance(\"HmacSHA1\");\n+        Mac mac = Mac.getInstance(\"HmacSHA256\");\n         mac.init(keySpec);\n         byte[] result = mac.doFinal(data);\n \n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 16,
                        "snippet": {"text": "public long counterOut;\n"},
                        "endColumn": 27,
                        "startColumn": 4,
                        "startLine": 16,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/helper/crypto/ECDHKeySet.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _ECDHKeySet.java_, class: _ECDHKeySet_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: ECDHKeySet.java, class: ECDHKeySet has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/helper/crypto/ECDHKeySet.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/helper/crypto/ECDHKeySet.java\n@@ -13,7 +13,7 @@\n     public byte[] ivServer;\n \n     public long counterIn;\n-    public long counterOut;\n+    private long counterOut;\n \n     public ECDHKeySet (byte[] masterKey, byte[] serverPubkey, byte[] clientPubkey) throws NoSuchProviderException, NoSuchAlgorithmException {\n         this.masterKey = masterKey;\n@@ -62,4 +62,8 @@\n         }\n     }\n \n+\tpublic long getCounterOut() {\n+\t\treturn counterOut;\n+\t}\n+\n }\n"}
            },
            {
                "locations": [{"physicalLocation": {
                    "region": {
                        "endLine": 15,
                        "snippet": {"text": "public long counterIn;\n"},
                        "endColumn": 26,
                        "startColumn": 4,
                        "startLine": 15,
                        "sourceLanguage": "Java"
                    },
                    "artifactLocation": {
                        "uri": "thunder-core/src/main/java/network/thunder/core/helper/crypto/ECDHKeySet.java",
                        "uriBaseId": "%SRCROOT%"
                    }
                }}],
                "ruleId": "LFA-1",
                "message": {
                    "markdown": "In file: method: _ECDHKeySet.java_, class: _ECDHKeySet_ has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read [CERT Secure coding standard OBJ01-J](https://wiki.sei.cmu.edu/confluence/display/java/OBJ01-J.+Limit+accessibility+of+fields).",
                    "text": "In file: ECDHKeySet.java, class: ECDHKeySet has a field that is declared as public but it may allow unwarranted access. The access to the field should be restricted and should only be through accessor methods. iCR suggested changes in <diff_locations> files to resolve the problem. For more information, read CERT Secure coding standard OBJ01-J."
                },
                "properties": {"diffContent": "--- /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/low/encryption/MessageEncrypterImpl.java\n+++ /workspace/source/thunder-core/src/main/java/network/thunder/core/communication/layer/low/encryption/MessageEncrypterImpl.java\n@@ -27,7 +27,7 @@\n     @Override\n     public Message decrypt (EncryptedMessage message, ECDHKeySet ecdhKeySet) {\n         CryptoTools.checkHMAC(message.hmac, message.payload, ecdhKeySet.hmacKey);\n-        byte[] bytes = CryptoTools.decryptAES_CTR(message.payload, ecdhKeySet.encryptionKey, ecdhKeySet.ivClient, ecdhKeySet.counterIn);\n+        byte[] bytes = CryptoTools.decryptAES_CTR(message.payload, ecdhKeySet.encryptionKey, ecdhKeySet.ivClient, ecdhKeySet.getCounterIn());\n \n         return serializater.deserializeMessage(bytes);\n     }\n"}
            }
        ],
        "tool": {"driver": {
            "name": "icr-for-java",
            "rules": [
                {
                    "name": "AddQualifierForStatic",
                    "id": "AQS-1",
                    "defaultConfiguration": {"level": "note"}
                },
                {
                    "name": "OverrideBothObject.equalsAndObject.hashcode",
                    "id": "CEH-1",
                    "defaultConfiguration": {"level": "warning"}
                },
                {
                    "name": "UncheckedMethodReturnValue",
                    "id": "CRR-1",
                    "defaultConfiguration": {"level": "note"}
                },
                {
                    "name": "AlwaysSynchronizeOnAPrivateFinalField",
                    "id": "CUS-2",
                    "defaultConfiguration": {"level": "error"}
                },
                {
                    "name": "UseBetterApiForEmptyStringCheck",
                    "id": "ESC-1",
                    "defaultConfiguration": {"level": "note"}
                },
                {
                    "name": "FixEqualityCheck",
                    "id": "FEC-2",
                    "defaultConfiguration": {"level": "warning"}
                },
                {
                    "name": "NullDereferenceCheck",
                    "id": "FND-1",
                    "defaultConfiguration": {"level": "error"}
                },
                {
                    "name": "PreventCross-siteScripting",
                    "id": "FT-2",
                    "defaultConfiguration": {"level": "error"}
                },
                {
                    "name": "EncapsulationProblem",
                    "id": "LFA-1",
                    "defaultConfiguration": {"level": "note"}
                },
                {
                    "name": "UseStrongHashFunction",
                    "id": "USA-3",
                    "defaultConfiguration": {"level": "error"}
                }
            ],
            "version": "4.2.0",
            "informationUri": "https://openrefactory.com/"
        }}
    }]
}